'From MIT Squeak 0.9.4 (June 1, 2003) [No updates present.] on 9 August 2014 at 10:36:16 am'!DialogBoxMorph subclass: #CustomDialog	instanceVariableNames: 'argsToReport stringFields radioButtons number customCheckboxes poso '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-UI-Dialogs'!AlignmentMorph subclass: #MenuMorph	instanceVariableNames: 'defaultTarget lastSelection stayUp originalEvent popUpOwner title '	classVariableNames: ''	poolDictionaries: ''	category: 'Morphic-Menus'!ArgMorph subclass: #MultiArgMorph	instanceVariableNames: 'text type minArgCount defaultArgCount isWrapping addMorph args removeMorph template '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Blocks'!ReporterBlockMorph subclass: #MakeCodeMorph	instanceVariableNames: 'myColor '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Blocks'!Morph subclass: #ScratchFrameMorph	instanceVariableNames: 'topPane viewerPane scriptsPane stageFrame workPane titlePane libraryPane menuPanel stageButtonsPanel readoutPane logoMorph projectTitleMorph flagButton fillScreenFlag paintingInProgress projectDirectory projectName projectInfo author loginName loginPassword watcherPositions shuffledCostumeNames justSaved viewModeButtons viewMode lastViewMode viewModeButtonsPanel toolbarPanel lastWeDoPoll compatibilityMode allExit shouldEnter continue plugins version '	classVariableNames: 'AllButtons Clipboard CodeList CustomButtons DefaultNotes DefaultSprite Fetchers Fonts FontsXO IsEXE IsXO MsId PluginData PluginSpecs ProjectIsNew RunDBlocks ScratchServers ScratchSkin ScratchSkinXO Subcategories TakeOverScreen UseErrorCatcher Version VersionDate VisibleDrives WorkpaneExtent '	poolDictionaries: ''	category: 'Scratch-UI-Panes'!Morph subclass: #ScriptableScratchMorph	instanceVariableNames: 'objName vars lists blocksBin isClone media costume costumeChangeMSecs filterPack visibility volume tempoBPM sceneStates lastDialog lastCustomDialog '	classVariableNames: 'BlockColorDict BlockSpecDict CameraExtent DefaultBackgroundForm DefaultSpriteForm DoubleSize Experimental ListBlockColor MeowSound OldMeowPrefixReversed Plugins PopSound RandomGen Recorder ScratchOrigin TimerStartMSecs '	poolDictionaries: ''	category: 'Scratch-Objects'!SimpleButtonMorph subclass: #ToggleButton	instanceVariableNames: 'onForm offForm overForm disabledForm isMomentary toggleMode isOn isDisabled isOver wasOn alphaOn extraData '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-UI-Support'!!Object methodsFor: 'error handling'!error: t1 	| t2 t3 |	t3 _ LinkMorph new font: (ScratchFrameMorph getFont: #ShareLink);			 contents: 'Contact us';			 url: 'http://explore4.weebly.com/contact.html'.	DialogBoxMorph new title: 'Error!!';			withButtonsForYes: false		no: false		okay: true		cancel: false;	 message: 'Oh no!! Something went wrong.An error message will come up after this. Please copy its contents, and contact us here:';	 addMessageLine: t3;	 getUserResponse.	(t2 _ Processor activeProcess errorHandler) notNil		ifTrue: [t2 value: t1 value: self]		ifFalse: [Debugger				openContext: thisContext				label: t1				contents: thisContext shortStack]! !!Object methodsFor: 'private'!errorImproperStore	self error: 'Improper store into indexable object'! !!Object methodsFor: 'as yet unclassified'!correctExploreStyle	^ self asString! !!ArgMorph methodsFor: 'other'!acceptsDroppedReporters	^ false! !!ArgMorph methodsFor: 'other'!acceptsTypeOf: t1 	^ false! !!ArgMorph class methodsFor: 'byob lambdas'!dropDownMenuForm	^ DropDownMenuForm! !!BlockMorph methodsFor: 'accessing'!showTuples	ScrollingDialog		inform: self tupleSequence printString		title: 'Tuples'		editable: true! !!BlockMorph methodsFor: 'dropping/grabbing'!aboutToBeGrabbedBy: t1 	| t2 |	(owner isKindOf: CommandBlockMorph)		| (owner isKindOf: WhenHatBlockMorph) | (owner isKindOf: MultiArgMorph)		ifTrue: 			[t2 _ owner argMorphToReplace: self.			t2 ifNotNil: [owner replaceArgMorph: self by: t2]]! !!BlockMorph methodsFor: 'event handling'!handleTool: t1 hand: t2 	| t3 t4 t5 t6 t7 t8 t9 |	t1 = 'CopyTool'		ifTrue: 			[Sensor shiftPressed ifFalse: [t2 toolType: nil].			(owner isKindOf: ScratchBlockPaletteMorph)				ifTrue: [^ self].			^ self duplicate].	t1 = 'CutTool'		ifTrue: 			[Sensor shiftPressed ifFalse: [t2 toolType: nil].			(self topBlock owner isKindOf: ScratchScriptsMorph)				ifTrue: 					[t3 _ self nextBlock.					t4 _ self owner.					t6 _ self ownerThatIsA: ScratchScriptsMorph.					(self isKindOf: ReporterBlockMorph)						ifTrue: 							[self argMorphs do: [:t10 | (t10 isKindOf: BlockMorph)									ifTrue: [t6 addMorphFront: t10]].							t7 _ owner argMorphToReplace: self.							t7 ifNotNil: [owner replaceArgMorph: self by: t7].							^ self delete].					t3						ifNotNil: [(t4 isKindOf: CBlockMorph)								ifTrue: 									[t5 _ t3 shallowCopy.									self topBlock owner addMorph: t5.									[t3 top > t4 bottom]										whileTrue: 											[t3 position: t3 left @ (t3 top - 1).											self world displayWorldSafely].									t5 delete.									t4 attachBlock: t3]								ifFalse: [(t4 isKindOf: ScratchScriptsMorph)										ifTrue: [t4 addMorph: t3]										ifFalse: 											[t5 _ t3 shallowCopy.											self topBlock owner addMorph: t5.											[t3 top > t4 bottom]												whileTrue: 													[t3 position: t3 left @ (t3 top - 1).													self world displayWorldSafely].											t5 delete.											t4 attachBlock: t3]]].					self isReporter ifTrue: [self aboutToBeGrabbedBy: t2].					ScratchFrameMorph putInClipboard: self.					self delete.					(t4 isKindOf: ScratchScriptsMorph)						ifTrue: [t4 step].					^ self].			t8 _ self ownerThatIsA: ScratchFrameMorph.			((owner isKindOf: ScratchBlockPaletteMorph)				and: [t8 viewerPane currentCategory = #variables])				ifTrue: 					[(self isKindOf: SetterBlockMorph)						ifTrue: [self variable								ifNotNil: 									[t9 _ self variable.									(self confirm: 'Really delete variable: ' , t9 , '?')										ifFalse: [^ self].									self receiver deleteVariable: t9]].					(self isKindOf: VariableBlockMorph)						ifTrue: 							[t9 _ self commandSpec.							(self confirm: 'Really delete variable: ' , t9 , '?')								ifFalse: [^ self].							self receiver deleteVariable: t9].					(t9 notNil and: [t8 notNil])						ifTrue: 							[t8 workPane deleteVariable: t9.							t8 viewerPane categoryChanged: 'variables']].			^ self]! !!BlockMorph methodsFor: 'private'!topBlock	| t1 |	t1 _ self.	[(t1 owner isKindOf: BlockMorph)		| (t1 owner isKindOf: MultiArgMorph)]		whileTrue: [t1 _ t1 owner].	^ t1! !!Boolean methodsFor: 'printing'!correctExploreStyle	self ifTrue: [^ 'true'].	^ 'false'! !!Browser class methodsFor: 'instance creation'!openBrowser	Browser openBrowserView: (Browser new openEditString: nil)		label: 'Explore System Browser'! !!ColorArgMorph class methodsFor: 'class initialization'!colorPalette	^ ColorPalette! !!CommandBlockMorph methodsFor: 'accessing'!rightButtonMenu	| t1 t2 t3 t4 t5 |	t1 _ CustomMenu new.	(owner isKindOf: ScratchBlockPaletteMorph)		ifFalse: 			[t1 addLine.			t1 _ self similarOptionsTo: t1.			t1 addLine.			t1 add: 'duplicate' action: #duplicate.			t1 add: 'delete' action: #deleteMe].	t2 _ self ownerThatIsA: ScratchFrameMorph.	(t2 notNil and: [#(#sensor: #sensorPressed: ) includes: selector])		ifTrue: 			[t1 addLine.			t1 add: 'show ScratchBoard watcher' action: #showSensorBoard.			t2 workPane scratchServer ifNil: [t1 add: 'enable remote sensor connections' action: #enableRemoteSensors]				ifNotNil: [t1 add: 'disable remote sensor connections' action: #exitScratchSession]].	t1 addLine.	t2 fillScreenFlag		ifTrue: 			[t1 add: 'edit block' action: #editMySelector.			t1 add: 'show tuples' action: #showTuples.			t1 addLine.			t1 add: 'change color...' action: #cColor.			t1 addLine].	t1 add: 'help' action: #presentHelpScreen.	(t3 _ t1 localize; startUp) ifNil: [^ self].	(#(#presentHelpScreen #duplicate #delete ) includes: t3)		ifTrue: [^ self perform: t3].	t3 = #showSensorBoard		ifTrue: 			[t2 showSensorBoard.			^ self].	t3 = #enableRemoteSensors		ifTrue: 			[t2 enableRemoteSensors.			^ self].	t3 = #exitScratchSession		ifTrue: 			[t2 exitScratchSession.			^ self].	t3 = #deleteMe ifTrue: [^ self deleteMe].	t3 = #cColor		ifTrue: 			[t5 _ ImageMorph new form: ColorArgMorph colorPalette.			t5 position: self bounds bottomLeft + (0 @ 5).			self world addMorph: t5.			self world displayWorldSafely.			Cursor eyeDropper				showWhile: 					[Sensor waitButton.					[Sensor anyButtonPressed]						whileTrue: 							[self color: (Display colorAt: Sensor cursorPoint).							self world displayWorldSafely].					nil].			t5 ifNotNil: [t5 delete].			^ 0].	t3 = #showTuples ifTrue: [^ self showTuples].	t3 = #editMySelector		ifTrue: 			[(ScriptableScratchMorph new respondsTo: selector)				ifTrue: 					[Browser fullOnClass: ScriptableScratchMorph selector: selector.					^ self].			(ScratchSpriteMorph new respondsTo: selector)				ifTrue: 					[Browser fullOnClass: ScratchSpriteMorph selector: selector.					^ self].			(ScratchStageMorph new respondsTo: selector)				ifTrue: 					[Browser fullOnClass: ScratchStageMorph selector: selector.					^ self].			^ self].	t2 _ self receiver blockSpecForSelector: t3.	t2 ifNil: [^ self beep].	self selector: t3.	selector numArgs = argMorphs size		ifFalse: 			[self removeAllMorphsIn: (submorphs select: [:t6 | (t6 isKindOf: ArgMorph)						| (t6 isKindOf: StringMorph)]).			argMorphs _ OrderedCollection new.			argPermutation _ CommandBlockMorph argPermutationForSpec: t2 withTranslation: (ScratchTranslator translationFor: t2)].	self commandSpec: t2! !!CommandBlockMorph methodsFor: 'evaluation'!uncoloredArgMorphFor: t1 	| t2 |	t2 _ t1 copyFrom: 2 to: t1 size.	(t1 beginsWith: '$Multi:')		ifTrue: [^ MultiArgMorph new template: (self uncoloredArgMorphFor: '$' , (t1 copyFrom: 8 to: t1 size))].	'Attributes' = t2 ifTrue: [^ AttributeArgMorph new choice: 'volume'].	'Boolean' = t2 ifTrue: [^ BooleanArgMorph new].	'ColorPalette' = t2 ifTrue: [^ ColorArgMorph new showPalette: true].	'ColorNP' = t2 ifTrue: [^ ColorArgMorph new showPalette: false].	'Directions' = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0';		 menuSelector: #directionMenu].	'DrumMid' = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '48';		 menuSelector: #midiDrumMenu].	'EventTitle' = t2 ifTrue: [^ EventTitleMorph new].	'MathFunctions' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #mathFunctionNames;		 choice: 'sqrt'].	'NewCostume' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #blobNames;		 choice: 'paint new'].	'GraphicEffects' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #graphicEffectNames;		 choice: 'color'].	'SensorNames' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupSensorNames].	'BoolSensorNames' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupBooleanSensorNames].	'MidiNames' = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #midiInstrumentMenu].	'ListMenu' = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #listIndexMenu].	'Keys' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #keyNames;		 choice: 'space'].	'Lists' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #listVarMenu].	'Costumes' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #costumeNames;		 choice: 'costume1'].	'Sprites' = t2 ifTrue: [^ SpriteArgMorph new].	'MotorNames' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorNames].	'Number' = t2 ifTrue: [^ ExpressionArgMorph new numExpression: '10'].	'Notes' = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '60';		 menuSelector: #noteSelector].	'String' = t2 ifTrue: [^ ExpressionArgMorph new stringExpression: ''].	'Sound' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #soundNames;		 choice: 'pop'].	'Vars' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #varNamesMenu;		 choice: ''].	'MotorDirs' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorDirection].	'SceneNames' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #sceneNames;		 choice: ''].	'ListDeleteIndex' = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #listIndexForDeleteMenu].	'RotationStyles' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #rotationStyleChanger;		 choice: 'normal'].	'SearchEngines' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #engineNames;		 choice: 'Google'].	'Dates' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #dateTime;		 choice: 'date'].	'MixingNames' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #mixingNames;		 choice: 'reverse'].	'VarStyles' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #varStyles;		 choice: 'small'].	'ListMath' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #listMath;		 choice: 'mean'].	'MouseNames' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #mouseNames;		 choice: 'left'].	'Multiline' = t2 ifTrue: [^ MultilineArgMorph new stringExpression: ''].	'FilePaths' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #pathNames;		 choice: 'user'].	'Operators' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #operatorNames;		 choice: '+'].	'MouseTypes' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #cursorNames;		 choice: 'normal'].	'Sizes' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #setNames;		 choice: 'size'].	'GMaps' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #googleMapTypes;		 choice: 'roadmap'].	'Constants' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #constantNames;		 choice: 'pi'].	'ListTypes' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #typeNames;		 choice: 'private'].	'OtherCTypes' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #addCostumeNames;		 choice: 'url'].	'Fonts' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #fontList;		 choice: 'Times New Roman'].	'FileOrFolder' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #directoryList;		 choice: 'files'].	'ColorData' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #colorNames;		 choice: 'hue'].	'BoolConversions' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #dataNames;		 choice: 'a number'].	'ProjectData' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #projectNames;		 choice: 'project directory'].	'CodeTypes' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #codeTypes;		 choice: 'Squeak'].	'Conversion' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #conversionNames;		 choice: 'string'].	'Presentation' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #presentationList;		 choice: 'presentation'].	'StringAnalyze' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #actionNames;		 choice: 'contains'].	'WeatherNumbers' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #weatherNumbers;		 choice: '4'].	'DepthNumbers' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #screenDepths;		 choice: '4 (grayscale)'].	'MultiArg' = t2 ifTrue: [^ MultiArgMorph new template: (ExpressionArgMorph new stringExpression: '')].	'ListOrVar' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #listOrVarHaHa;		 choice: 'variable'].	'ProgramFonts' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #programFonts;		 choice: 'ProjectNotes'].	'CustomPositions' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #customPosition;		 choice: 'left'].	'CheckboxOptions' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #checkboxType;		 choice: 'checkboxes'].	'PassOrNorm' = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #passOrNorm;		 choice: 'string'].	'StepSpeed' = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0 (Turbo mode)';		 menuSelector: #stepSpeedMenu].	'UseTypes' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #useTypes;		 choice: 'Explore'].	'NewlineTypes' = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #newlineTypes;		 choice: 'newline (crlf)'].	t2 _ t1 at: 2.	$a = t2 ifTrue: [^ AttributeArgMorph new choice: 'volume'].	$b = t2 ifTrue: [^ BooleanArgMorph new].	$c = t2 ifTrue: [^ ColorArgMorph new showPalette: true].	$C = t2 ifTrue: [^ ColorArgMorph new showPalette: false].	$d = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '0';		 menuSelector: #directionMenu].	$D = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '48';		 menuSelector: #midiDrumMenu].	$e = t2 ifTrue: [^ EventTitleMorph new].	$f = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #mathFunctionNames;		 choice: 'sqrt'].	$F = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #blobNames;		 choice: 'paint new'].	$g = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #graphicEffectNames;		 choice: 'color'].	$H = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupSensorNames].	$h = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #hookupBooleanSensorNames].	$I = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #midiInstrumentMenu].	$i = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #listIndexMenu].	$k = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #keyNames;		 choice: 'space'].	$L = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #listVarMenu].	$l = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #costumeNames;		 choice: 'costume1'].	$m = t2 ifTrue: [^ SpriteArgMorph new].	$M = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorNames].	$n = t2 ifTrue: [^ ExpressionArgMorph new numExpression: '10'].	$N = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '60';		 menuSelector: #noteSelector].	$s = t2 ifTrue: [^ ExpressionArgMorph new stringExpression: ''].	$S = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #soundNames;		 choice: 'pop'].	$v = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #varNamesMenu;		 choice: ''].	$W = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #motorDirection].	$x = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #sceneNames;		 choice: ''].	$y = t2 ifTrue: [^ ExpressionArgMorphWithMenu new numExpression: '1';		 menuSelector: #listIndexForDeleteMenu].	$r = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #rotationStyleChanger;		 choice: 'normal'].	$j = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #engineNames;		 choice: 'Google'].	$Q = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #dateTime;		 choice: 'date'].	$T = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #mixingNames;		 choice: 'reverse'].	$R = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #varStyles;		 choice: 'small'].	$G = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #listMath;		 choice: 'mean'].	$K = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #mouseNames;		 choice: 'left'].	$q = t2 ifTrue: [^ MultilineArgMorph new stringExpression: ''].	$t = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #pathNames;		 choice: 'user'].	$Y = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #operatorNames;		 choice: '+'].	$E = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #cursorNames;		 choice: 'normal'].	$X = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #setNames;		 choice: 'size'].	$V = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #googleMapTypes;		 choice: 'roadmap'].	$B = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #constantNames;		 choice: 'pi'].	$A = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #typeNames;		 choice: 'private'].	$O = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #addCostumeNames;		 choice: 'url'].	$o = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #fontList;		 choice: 'Times New Roman'].	$p = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #directoryList;		 choice: 'files'].	$P = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #colorNames;		 choice: 'hue'].	$U = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #dataNames;		 choice: 'a number'].	$z = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #projectNames;		 choice: 'project directory'].	$Z = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #codeTypes;		 choice: 'Squeak'].	$u = t2 ifTrue: [^ ChoiceOrExpressionArgMorph new getOptionsSelector: #conversionNames;		 choice: 'string'].	$J = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #presentationList;		 choice: 'enter'].	$w = t2 ifTrue: [^ ChoiceArgMorph new getOptionsSelector: #actionNames;		 choice: 'contains'].	^ ExpressionArgMorph new numExpression: '10'! !!CommandBlockMorph methodsFor: 'menus'!deleteMe	| t1 t2 t3 t4 t5 |	t1 _ self nextBlock.	t2 _ self owner.	t3 _ self ownerThatIsA: ScratchScriptsMorph.	(self isKindOf: ReporterBlockMorph)		ifTrue: 			[self argMorphs do: [:t6 | (t6 isKindOf: BlockMorph)					ifTrue: [t3 addMorphFront: t6]].			t5 _ owner argMorphToReplace: self.			t5 ifNotNil: [owner replaceArgMorph: self by: t5].			^ self delete].	t1		ifNotNil: [(t2 isKindOf: CBlockMorph)				ifTrue: 					[t4 _ t1 shallowCopy.					self topBlock owner addMorph: t4.					[t1 top > t2 bottom]						whileTrue: 							[t1 position: t1 left @ (t1 top - 1).							self world displayWorldSafely].					t4 delete.					t2 attachBlock: t1]				ifFalse: [(t2 isKindOf: ScratchScriptsMorph)						ifTrue: [t2 addMorph: t1]						ifFalse: 							[t4 _ t1 shallowCopy.							self topBlock owner addMorph: t4.							[t1 top > t2 bottom]								whileTrue: 									[t1 position: t1 left @ (t1 top - 1).									self world displayWorldSafely].							t4 delete.							t2 attachBlock: t1]]].	self isReporter ifTrue: [self aboutToBeGrabbedBy: World activeHand].	ScratchFrameMorph putInClipboard: self.	self delete.	(t2 isKindOf: ScratchScriptsMorph)		ifTrue: [t2 step]! !!CommandBlockMorph methodsFor: 'menus'!similarOptionsTo: t1 	| t2 t3 |	t3 _ t1.	t2 _ #((('set x to ()' #xPos:) ('set y to ()' #yPos:)) (('change x by ()' #changeXposBy:) ('change y by ()' #changeYposBy:)) (('turn left () degrees' #turnLeft:) ('turn right () degrees' #turnRight:)) (('x position' #xPos) ('y position' #yPos)) (('show' #show) ('hide' #hide)) (('key pressed' #keyPressed) ('all keys pressed' #keyPressedAll)) (('mouse x' #mouseX) ('mouse y' #mouseY)) (('stop all' #stopAll) ('stop script' #doReturn) ('stop all/green flag' #restartProject)) (('letter () of []' #letter:of:) ('letters () to () of []' #letter:to:of:)) (('and' #&) ('or' #|)) (('true' #true) ('false' #false)) (('=' #=) ('<' #<) ('>' #>)) (('round' #rounded) ('round to' #round:to:)) (('hide variable' #hideVariable:) ('show variable' #showVariable:)) (('show list' #showList:) ('hide list' #hideList:)) (('file exists' #fileExists:) ('folder exists' #folderExists:)) (('pick folder' #pickFolderTitle:initialDirectory:) ('pick file' #pickFileTitle:initialDirectory:)) (('pen hue' #penHue) ('pen shade' #penShade) ('pen size' #penSize)) ).	t2 do: [:t4 | t4 do: 			[:t5 | 			t5 second = selector				ifTrue: 					[t4 do: [:t6 | t6 second = selector ifFalse: [t3 add: t6 first action: t6 second]].					^ t3].			nil]].	^ t3! !!CommandBlockMorph methodsFor: 'stack/tuple conversion'!asBlockTuple	| t1 t2 t3 |	t1 _ Array new: argMorphs size + 1.	t1 at: 1 put: selector.	t2 _ argMorphs.	t2 _ self organizeArgs: t2.	((#(#+ #- #/ #* #= ) includes: selector)		and: [ScratchTranslator isRTLMath])		ifTrue: [t2 _ t2 reversed].	1 to: t2 size do: 		[:t4 | 		t3 _ t2 at: t4.		(t3 isKindOf: ArgMorph)			| (t3 isKindOf: EventTitleMorph) & (t3 isKindOf: MultiArgMorph) not			ifTrue: [t1 at: t4 + 1 put: t3 evaluate]			ifFalse: [t1 at: t4 + 1 put: t3 asBlockTuple]].	^ t1! !!CommandBlockMorph methodsFor: 'private'!canBecomeWatcher	| t1 |	t1 _ selector asString findAnySubStr: #('mouse' 'key' 'touching' 'distance' ) startingAt: 1.	^ self isReporter & (self argumentCount <= 1) & (#(#not #atRandom #cloudList: #abs #rounded #userPath: #costumeNameFromNumber: #usingType: #reportCode: #password:customStringField: #asString: #infinity #readFile: #fileExists: #newlineCharacter: #color: #constant: #sizeOfFile: #censorWord: #usingExplore #localNameFor: #height #width #directoryFor: #cameraOpen #addCustomCheckboxes: #displayCustomDialogMorphs: #displayCustomDialogMorphsA: #multiline: #asciiFor: #asciiLetter: #customFont: #true #false #fontExists: #lengthOfSound: #mySpriteList #sounds #internetConnected #dialogAsk: #isNumber: #isString: #numFileLines: #multiItemList: #isAClone: #fileType: #getTime: #fontNum: #isClone #name #cloudListLength: #askDialog: #inform: #folderExists: #confirm: #pickFileTitle: #pickFolderTitle: #negatecolor: #userHomePath #multistringLines: #distanceTo:and: #asciiForThis: #getCloudVar: #getPrivateCloudVar: #objectsTouched #numUrlFileLines: #convertToCollection: #allClones #readFromUrl: #me #hexAsColor: #theStage #colorAsHex: #project: #myParent #lineCountOfList: #allSprites #myClones #coerceSpriteArg: #wordsIn: #fonts #sortAlphabetically: #infoForZipcode: #objectNameOf: #synonymsFor: #customTitle: #customDialogText: #cloneMe #stringLength: ) includes: selector) not & (t1 > selector asString size)! !!CommandBlockMorph methodsFor: 'private'!tabToNextField: t1 	| t2 t3 |	t2 _ OrderedCollection new.	t2 _ argMorphs do: 				[:t4 | 				(t4 isKindOf: ExpressionArgMorph)					ifTrue: [t2 add: t4].				((t4 isKindOf: MultiArgMorph)					and: [t4 template isKindOf: ExpressionArgMorph])					ifTrue: [t2 addAll: t4 args]].	t3 _ (1 to: t2 size)				detect: [:t5 | (t2 at: t5) labelMorph == t1 hand keyboardFocus]				ifNone: [t2 size].	t1 hand newKeyboardFocus: (t2 at: t3 \\ t2 size + 1) labelMorph! !!CBlockMorph methodsFor: 'private'!asBlockTuple	| t1 t2 t3 |	t1 _ Array new: argMorphs size + 2.	t1 at: 1 put: selector.	t3 _ argMorphs.	t3 _ self organizeArgs: t3.	1 to: t3 size do: 		[:t4 | 		t2 _ t3 at: t4.		(t2 isKindOf: ArgMorph)			& (t2 isKindOf: MultiArgMorph) not			ifTrue: [t1 at: t4 + 1 put: t2 evaluate]			ifFalse: [t1 at: t4 + 1 put: t2 asBlockTuple]].	nestedBlock ifNil: [t1 at: t1 size put: nil]		ifNotNil: [t1 at: t1 size put: nestedBlock tupleSequence].	^ t1! !!CommandBlockMorph class methodsFor: 'utilities'!argPermutationForSpec: t1 withTranslation: t2 	| t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 |	t3 _ CommandBlockMorph parseCommandSpec: t1.	t5 _ t3 select: [:t13 | CommandBlockMorph isArgSpec: t13].	t4 _ CommandBlockMorph parseCommandSpec: t2.	t6 _ t4 select: [:t13 | CommandBlockMorph isArgSpec: t13].	t7 _ #().	t12 _ t5 size.	1 to: t12 do: [:t14 | t7 _ t7 copyWith: t14].	t11 _ t7.	t5 = t6 ifTrue: [^ t11].	t12 _ t5 size.	1 to: t12 do: 		[:t14 | 		t8 _ t5 at: t14.		t9 _ (t5 select: [:t13 | t13 = t8]) size.		t9 = 1			ifTrue: [t7 at: t14 put: (t6 indexOf: t8)]			ifFalse: 				[t10 _ ((t5 copyFrom: 1 to: t14)							select: [:t13 | t13 = t8]) size.				t7 at: t14 put: (t6 indexOf: t8 , t10 asString)]].	^ t7! !!CommandBlockMorph class methodsFor: 'utilities'!isArgSpec: t1 	^ t1 size > 1 and: [t1 first = $$]! !!CommandBlockMorph class methodsFor: 'utilities'!parseCommandSpec: t1 	| t2 t3 t4 t5 t6 t7 |	t2 _ OrderedCollection new.	t6 _ t1.	(t6 isKindOf: UTF8)		ifTrue: [t6 _ String withAll: t6].	t3 _ t1 size.	t4 _ 1.	[t4 < t3 and: [(t6 at: t4) isSeparator]]		whileTrue: [t4 _ t4 + 1].	[t4 <= t3]		whileTrue: 			[t5 _ t6 indexOf: $$ startingAt: t4.			t5 > 0				ifTrue: 					[t5 > t4 ifTrue: [t2 addLast: (t6 copyFrom: t4 to: t5 - 1)].					t5 < t3						ifTrue: 							[t7 _ t5 + 1.							(t6 at: t7) isLetter								ifTrue: 									[[t7 + 1 <= t3 and: [(t6 at: t7 + 1)											~= $$]]										whileTrue: [t7 _ t7 + 1].									t7 >= t3										ifTrue: 											[t2 addLast: (t6 copyFrom: t5 to: t3).											t4 _ t3 + 1]										ifFalse: 											[t2 addLast: (t6 copyFrom: t5 to: t7).											t4 _ t7 + 2]]								ifFalse: 									[t2 addLast: '$'.									t4 _ t5 + 1]]						ifFalse: 							[t2 addLast: '$'.							t4 _ t5 + 2]]				ifFalse: 					[t2 addLast: (t6 copyFrom: t4 to: t3).					t4 _ t3 + 1]].	t2 _ t2 select: [:t8 | t8 ~= ' '].	^ t2 asArray collect: [:t8 | t8 withBlanksTrimmed]! !!DialogBoxMorph methodsFor: 'initialization'!initialize	super initialize.	self initFromForm: (ScratchFrameMorph skinAt: #dialogFrame).	self addNoShadowFrameFromForm: (ScratchFrameMorph skinAt: #dialogFrameNoShadow).	done _ false.	tabFields _ OrderedCollection new.	mainColumn _ AlignmentMorph newColumn color: Color transparent;			 centering: #center;			 hResizing: #shrinkWrap;			 vResizing: #shrinkWrap.	shortcutColumn _ AlignmentMorph newColumn color: Color transparent;			 centering: #center;			 hResizing: #shrinkWrap;			 vResizing: #shrinkWrap.	fileInfoColumn _ AlignmentMorph newColumn color: Color transparent;			 centering: #topLeft;			 hResizing: #shrinkWrap;			 vResizing: #shrinkWrap.	titleBin _ AlignmentMorph newRow color: Color transparent;			 centering: #center;			 hResizing: #spaceFill;			 vResizing: #rigid;			 height: 32.	buttonRow _ AlignmentMorph newRow color: Color transparent;			 hResizing: #shrinkWrap;			 vResizing: #shrinkWrap;			 height: 32.	ScratchTranslator isRTL		ifTrue: [fileInfoColumn centering: #bottomRight]		ifFalse: [fileInfoColumn centering: #topLeft].	self addMorph: mainColumn;	 addMorph: shortcutColumn;	 addMorph: fileInfoColumn;	 addMorph: titleBin.	mainColumn addMorph: buttonRow.	self extent: 50 @ 50! !!DialogBoxMorph methodsFor: 'interaction'!message: t1 font: t2 	| t3 t4 |	messageLineMorphs _ AlignmentMorph newColumn color: Color transparent;			 hResizing: #shrinkWrap;			 vResizing: #shrinkWrap;			 centering: #center.	t3 _ t1 lines.	1 to: t3 size do: 		[:t5 | 		t4 _ StringMorph contents: (t3 at: t5)					font: t2.		messageLineMorphs addMorphBack: t4].	mainColumn addMorph: messageLineMorphs.	self changed! !!DialogBoxMorph methodsFor: 'interaction'!percentDone: t1 	| t2 t3 t4 |	percentMorph		ifNil: 			[percentMorph _ RectangleMorph new extent: 104 @ 16;					 borderWidth: 1;					 color: Color transparent;					 borderColor: (Color gray: 0.5).			t4 _ Morph new extent: 0 @ 12;					 color: (Color							r: 0.35							g: 0.5							b: 0.67);					 position: percentMorph position + 2.			percentMorph addMorph: t4.			percentMorph position: self center x - (percentMorph width // 2) - 5 @ (buttonRow top - 27).			mainColumn addMorph: percentMorph].	t3 _ percentMorph width - 4.	t4 _ percentMorph firstSubmorph.	t2 _ (t1 * t3 / 100.0) rounded within: 0 and: t3.	t4 width: t2.	World displayWorld! !!CustomDialog methodsFor: 'creating'!addScrollString: t1 extent: t2 editable: t3 font: t4 	argsToReport add: (ScrollingStringMorph new font: (t4 = nil | t4 = 0				ifTrue: [ScratchFrameMorph getFont: #FolderShortcut]				ifFalse: [ScratchFrameMorph getFont: t4]);		 extent: t2;		 contents: t1;		 borderWidth: 0;		 backForm: (ScratchFrameMorph skinAt: #stringFieldFrame);		 isEditable: t3).	(poso ifNil: [mainColumn])		addMorph: argsToReport last.	t3 = true ifFalse: [argsToReport removeAt: argsToReport size].	poso _ mainColumn! !!CustomDialog methodsFor: 'creating'!createCheckBoxesFor: t1 font: t2 multipleSelection: t3 	| t4 t5 t6 |	t3		ifTrue: 			[t4 _ ScratchFrameMorph skinAt: #watcherButtonPressed.			t5 _ ScratchFrameMorph skinAt: #watcherButton]		ifFalse: 			[t4 _ ScratchFrameMorph skinAt: #radioButtonOn.			t5 _ ScratchFrameMorph skinAt: #radioButton].	t1 asOrderedCollection do: 		[:t7 | 		t6 _ OrderedCollection new.		t6 add: (ToggleButton onForm: t4 offForm: t5).		t3			ifFalse: 				[t6 first target: self;				 extraData: number;				 actionSelector: #setButton:.				t6 first arguments: t6].		t6 add: (AlignmentMorph new color: Color transparent;			 vResizing: #rigid;			 height: 26).		t6 add: t7.		t6 second addMorph: t6 first.		t6 second addMorphBack: (StringMorph new contents: t7 font: ((#(0 '0' #nil ) includes: t2)					ifTrue: [ScratchFrameMorph getFont: #FolderShortcut]					ifFalse: [ScratchFrameMorph getFont: t2])).		(poso ifNil: [mainColumn])			addMorph: t6 second.		customCheckboxes add: t6].	number _ number + 1.	poso _ mainColumn! !!CustomDialog methodsFor: 'creating'!dialogButtons: t1 opt2: t2 opt3: t3 	| t4 |	t4 _ Morph new extent: 10 @ 5;			 color: Color transparent.	buttonRow removeAllMorphs.	buttonRow addMorphBack: (AlignmentMorph newSpacer: Color transparent).	buttonRow addMorphBack: t4.	opt1 _ t1.	opt2 _ t2.	opt3 _ t3.	t1 = ''		ifFalse: 			[buttonRow addMorphBack: (self buttonLabel: t1 action: #opt1).			buttonRow addMorphBack: t4 fullCopy].	t2 = ''		ifFalse: 			[buttonRow addMorphBack: (self buttonLabel: t2 action: #opt2).			buttonRow addMorphBack: t4 fullCopy].	t3 = ''		ifFalse: 			[buttonRow addMorphBack: (self buttonLabel: t3 action: #opt3).			buttonRow addMorphBack: t4 fullCopy]! !!CustomDialog methodsFor: 'creating'!getUserResponseSpecial	| t1 t2 t3 t4 t5 |	self openInWorld.	self centerOnScreen.	t1 _ self world.	self buttons size > 0 ifTrue: [t1 activeHand newKeyboardFocus: self buttons last].	tabFields size > 0 ifTrue: [t1 activeHand newKeyboardFocus: (tabFields at: 1)].	World displayWorldSafely.	done _ false.	[done]		whileFalse: [t1 doOneCycle].	World displayWorldSafely.	t2 _ OrderedCollection new.	argsToReport do: [:t6 | (t6 isKindOf: ScrollingStringMorph)			ifTrue: [t2 add: t6 contents]			ifFalse: [t2 add: t6 asString]].	t3 _ OrderedCollection new.	t5 _ OrderedCollection new.	t4 _ 0.	customCheckboxes do: 		[:t7 | 		t7 first extraData = t4			ifFalse: 				[t3 size >= 1 ifTrue: [t5 add: t3 reversed].				t4 _ t7 first extraData.				t3 _ OrderedCollection new].		t7 first isOn ifTrue: [t3 add: (t7 last copyFrom: 4 to: t7 last size)]].	t3 size >= 1		ifTrue: [t5 add: t3 reversed]		ifFalse: [customCheckboxes size > 0 ifTrue: [t5 add: OrderedCollection new]].	t5 reverseDo: [:t8 | t2 add: t8].	t3 _ OrderedCollection new.	stringFields do: [:t7 | t3 add: t7 contents asString].	t3 size >= 1 ifTrue: [t2 add: t3 reversed].	^ t2! !!CustomDialog methodsFor: 'creating'!message: t1 font: t2 	| t3 t4 |	messageLineMorphs _ AlignmentMorph newColumn color: Color transparent;			 hResizing: #shrinkWrap;			 vResizing: #shrinkWrap;			 centering: #center.	t3 _ t1 lines.	1 to: t3 size do: 		[:t5 | 		t4 _ StringMorph contents: (t3 at: t5)					font: t2.		messageLineMorphs addMorphBack: t4].	(poso ifNil: [mainColumn])		addMorphFront: messageLineMorphs.	self changed.	poso _ mainColumn! !!CustomDialog methodsFor: 'creating'!opt1	argsToReport add: opt1.	done _ true.	self delete.	World doOneCycle! !!CustomDialog methodsFor: 'creating'!opt2	argsToReport add: opt2.	done _ true.	self delete.	World doOneCycle! !!CustomDialog methodsFor: 'creating'!opt3	argsToReport add: opt3.	done _ true.	self delete.	World doOneCycle! !!CustomDialog methodsFor: 'creating'!setButton: t1 	customCheckboxes do: [:t2 | t2 first = t1			ifFalse: [t2 first extraData = t1 extraData ifTrue: [t2 first off]]]! !!CustomDialog methodsFor: 'creating'!stringField: t1 font: t2 	stringFields add: (StringFieldMorph new useStringFieldFrame; contents: t1 asString; font: ((#(#nil 0 '0' ) includes: t2)				ifTrue: [ScratchFrameMorph getFont: #ProjectNotes]				ifFalse: [ScratchFrameMorph getFont: t2])).	(poso ifNil: [mainColumn])		addMorph: stringFields last.	poso _ mainColumn! !!CustomDialog methodsFor: 'creating'!stringField: t1 font: t2 passwordMode: t3 	stringFields add: (StringFieldMorph new useStringFieldFrame; contents: t1 asString; font: ((#(#nil 0 '0' ) includes: t2)				ifTrue: [ScratchFrameMorph getFont: #ProjectNotes]				ifFalse: [ScratchFrameMorph getFont: t2]); passwordMode: t3).	(poso ifNil: [mainColumn])		addMorph: stringFields last.	poso _ mainColumn! !!CustomDialog methodsFor: 'initialization'!initialize	argsToReport _ OrderedCollection new.	stringFields _ OrderedCollection new.	customCheckboxes _ OrderedCollection new.	radioButtons _ OrderedCollection new.	number _ 0.	poso _ mainColumn.	super initialize! !!CustomDialog methodsFor: 'initialization'!poso	^ poso! !!CustomDialog methodsFor: 'initialization'!poso: t1 	t1 = 'left' ifTrue: [poso _ shortcutColumn].	t1 = 'right' ifTrue: [poso _ fileInfoColumn].	t1 = 'center' ifTrue: [poso _ mainColumn]! !!DialogBoxMorph class methodsFor: 'instance creation'!form: t1 title: t2 	| t3 |	t3 _ self new				withButtonsForYes: false				no: false				okay: true				cancel: false.	t3 message: 'abc' font: (ScratchFrameMorph getFont: #DialogBoxMessage);	 title: t2.	t3 messageLineMorphs addMorphBack: (ImageMorph new form: t1).	^ t3 getUserResponse! !!DialogBoxMorph class methodsFor: 'instance creation'!form: t1 title: t2 text: t3 	| t4 |	t4 _ self new				withButtonsForYes: false				no: false				okay: true				cancel: false.	t4 message: t3 asString font: (ScratchFrameMorph getFont: #DialogBoxMessage);	 title: t2.	t4 messageLineMorphs addMorphBack: (ImageMorph new form: t1).	^ t4 getUserResponse! !!DialogBoxMorph class methodsFor: 'instance creation'!image: t1 title: t2 	| t3 |	t3 _ self new				withButtonsForYes: false				no: false				okay: true				cancel: false;			 title: t2.	t3 message: '' font: (StrikeFont fontName: 'VerdanaBold' size: 13).	t3 messageLineMorphs self addMorphBack: (ImageMorph new form: t1).	^ t3 getUserResponse! !!HandMorph methodsFor: 'world menu'!openMenu	| t1 |	t1 _ (MenuMorph entitled: 'open...')				defaultTarget: self.	t1 addStayUpItem.	t1 add: 'browser' action: #openBrowser.	t1 add: 'workspace' action: #openWorkspace.	t1 add: 'file list' action: #openFileList.	t1 add: 'transcript' action: #openTranscript.	t1 addLine.	t1		add: 'simple change sorter'		selector: #openChangeSorter:		argument: 1.	t1		add: 'dual change sorter'		selector: #openChangeSorter:		argument: 2.	t1 addLine.	t1 add: 'mvc project' action: #openMVCProject.	t1 add: 'morphic project' action: #openMorphicProject.	^ t1! !!IfElseBlockMorph methodsFor: 'private'!asBlockTuple	| t1 t2 t3 |	t1 _ Array new: argMorphs size + 3.	t1 at: 1 put: selector.	t3 _ argMorphs.	t3 _ self organizeArgs: t3.	1 to: t3 size do: 		[:t4 | 		t2 _ t3 at: t4.		(t2 isKindOf: ArgMorph)			& (t2 isKindOf: MultiArgMorph) not			ifTrue: [t1 at: t4 + 1 put: t2 evaluate]			ifFalse: [t1 at: t4 + 1 put: t2 asBlockTuple]].	trueBlock ifNil: [t1 at: t1 size - 1 put: nil]		ifNotNil: [t1 at: t1 size - 1 put: trueBlock tupleSequence].	falseBlock ifNil: [t1 at: t1 size put: nil]		ifNotNil: [t1 at: t1 size put: falseBlock tupleSequence].	^ t1! !!MenuMorph methodsFor: 'construction'!title	^ title! !!MenuMorph methodsFor: 'construction'!title: t1 	title _ t1.	self addTitle: t1! !!MenuMorph methodsFor: 'control'!deleteIfPopUp	stayUp ifFalse: [self delete].	(popUpOwner notNil and: [popUpOwner isKindOf: MenuItemMorph])		ifTrue: 			[popUpOwner isSelected: false.			(popUpOwner owner isKindOf: MenuMorph)				ifTrue: [popUpOwner owner deleteIfPopUp]]! !!MenuMorph methodsFor: 'control'!deleteIfPopUpFrom: t1 event: t2 	stayUp		ifFalse: [((self hasProperty: #stayUpOnce)				or: [(t2 cursorPoint dist: originalEvent cursorPoint)						< 2])				ifTrue: 					[self removeProperty: #stayUpOnce.					^ t2 hand newMouseFocus: t1]].	self deleteIfPopUp! !!MultiArgMorph methodsFor: 'as yet unclassified'!acceptsDroppedReporters	^ true! !!MultiArgMorph methodsFor: 'as yet unclassified'!acceptsTypeOf: t1 	^ true! !!MultiArgMorph methodsFor: 'as yet unclassified'!addArg	| t1 |	t1 _ template fullCopy.	self addMorph: t1.	args add: t1.	self fixArgLayout! !!MultiArgMorph methodsFor: 'as yet unclassified'!addArg: t1 	args add: t1.	self addMorph: t1! !!MultiArgMorph methodsFor: 'as yet unclassified'!addArgWithValue: t1 	| t2 |	t2 _ template fullCopy.	self addMorph: t2.	args add: t2.	self fixArgLayout.	t2 defaultValue: t1! !!MultiArgMorph methodsFor: 'as yet unclassified'!adder	^ addMorph! !!MultiArgMorph methodsFor: 'as yet unclassified'!argMorphToReplace: t1 	^ template fullCopy! !!MultiArgMorph methodsFor: 'as yet unclassified'!args	^ args! !!MultiArgMorph methodsFor: 'as yet unclassified'!asBlockTuple	^ {'MultiArgMorph'. template class name. args		collect: [:t1 | (t1 isKindOf: BlockMorph)				ifTrue: [t1 asBlockTuple]				ifFalse: [t1 evaluate]]}! !!MultiArgMorph methodsFor: 'as yet unclassified'!clearArgs	args do: [:t1 | t1 delete].	args _ OrderedCollection new! !!MultiArgMorph methodsFor: 'as yet unclassified'!defaultValue: t1 	| t2 |	t2 _ t1.	self clearArgs.	(t2 isKindOf: Collection)		& (t2 isKindOf: String) not ifFalse: [t2 _ {t1}].	t2 do: [:t3 | self addArgWithValue: t3]! !!MultiArgMorph methodsFor: 'as yet unclassified'!evaluate	^ args collect: [:t1 | t1 evaluate]! !!MultiArgMorph methodsFor: 'as yet unclassified'!fieldsVersion	^ 1! !!MultiArgMorph methodsFor: 'as yet unclassified'!fullCopyX	| t1 |	t1 _ MultiArgMorph new template: template;			 clearArgs.	args do: [:t2 | t1 addArg].	t1 fixArgLayout.	^ t1! !!MultiArgMorph methodsFor: 'as yet unclassified'!handlesMouseDown: t1 	^ true! !!MultiArgMorph methodsFor: 'as yet unclassified'!initFieldsFrom: t1 version: t2 	super initFieldsFrom: t1 version: t2.	self initFieldsNamed: #(#args #addArgs #removeMorph #template ) from: t1! !!MultiArgMorph methodsFor: 'as yet unclassified'!initialize	| t1 |	super initialize.	args _ OrderedCollection new.	t1 _ ScratchFrameMorph skinAt: #arrowClosedComment.	addMorph _ ImageMorph new form: t1.	removeMorph _ ImageMorph new form: (t1 flipBy: #horizontal centerAt: t1 center).	self color: Color transparent;	 borderWidth: 0;	 addMorph: addMorph;	 addMorph: removeMorph! !!MultiArgMorph methodsFor: 'as yet unclassified'!install: t1 	self clearArgs.	t1 do: [:t2 | self addArg: t2]! !!MultiArgMorph methodsFor: 'as yet unclassified'!isBooleanReporter	^ false! !!MultiArgMorph methodsFor: 'as yet unclassified'!mouseDown: t1 	(addMorph bounds containsPoint: t1 cursorPoint)		ifTrue: [self addArg]		ifFalse: [(removeMorph bounds containsPoint: t1 cursorPoint)				& (args size > 0)				ifTrue: [self removeArg]				ifFalse: [^ owner mouseDown: t1]]! !!MultiArgMorph methodsFor: 'as yet unclassified'!removeArg	| t1 t2 |	(t1 _ args removeLast) delete.	(t1 isKindOf: BlockMorph)		& (t1 isKindOf: VariableArgMorph) not ifTrue: [(t2 _ self ownerThatIsA: ScratchScriptsMorph)			ifNotNil: 				[t2 addMorph: t1.				t1 position: t1 owner left + 90 @ (t1 top - 20)]].	self fixArgLayout! !!MultiArgMorph methodsFor: 'as yet unclassified'!replaceArgMorph: t1 by: t2 	t1 == addMorph		ifTrue: [self addArg: t1]		ifFalse: 			[self replaceSubmorph: t1 by: t2.			args at: (args indexOf: t1)				put: t2].	self fixArgLayout! !!MultiArgMorph methodsFor: 'as yet unclassified'!storeFieldsOn: t1 	super storeFieldsOn: t1.	self inform: args asString.	self storeFieldsNamed: #(#args #addMorph #removeMorph #template ) on: t1! !!MultiArgMorph methodsFor: 'as yet unclassified'!template	^ template! !!MultiArgMorph methodsFor: 'as yet unclassified'!template: t1 	self clearArgs.	template _ t1.	self addArg! !!MultiArgMorph methodsFor: 'as yet unclassified'!transformToString	self owner replaceArgMorph: self by: (ExpressionArgMorph new stringExpression: '';		 isMultiArg: true)! !!MultiArgMorph methodsFor: 'as yet unclassified'!updateReferencesUsing: t1 	super updateReferencesUsing: t1.	args _ args collect: [:t2 | t1 at: t2 ifAbsent: [t2]]! !!MultiArgMorph methodsFor: 'error handling'!receiver	^ owner receiver! !!MultiArgMorph methodsFor: '-- all --'!fixArgLayout	| t1 t2 t3 |	owner ifNotNil: [self color: owner color].	args size = 0		ifTrue: 			[removeMorph delete.			t1 _ {addMorph}]		ifFalse: 			[self addMorph: removeMorph.			t1 _ args , {removeMorph. addMorph}].	t3 _ t1 inject: 0 into: [:t4 :t5 | t4 max: t5 height].	t2 _ 0.	t1 do: 		[:t4 | 		(t4 respondsTo: #fixArgLayout)			ifTrue: [t4 fixArgLayout].		(t4 respondsTo: #fixBlockLayout)			ifTrue: [t4 fixBlockLayout].		t4 position: t2 @ (t3 - t4 height // 2) + self position.		t2 _ t2 + t4 width + ((t4 isKindOf: ImageMorph)						ifTrue: [0]						ifFalse: [3])].	self extent: t2 + 2 @ t3! !!Number methodsFor: 'printing'!correctExploreStyle	^ self asString! !!ObjStream class methodsFor: 'class initialization'!userClasses	^ #((100 #Morph) (101 #BorderedMorph) (102 #RectangleMorph) (103 #EllipseMorph) (104 #AlignmentMorph) (105 #StringMorph) (106 #UpdatingStringMorph) (107 #SimpleSliderMorph) (108 #SimpleButtonMorph) (109 #SampledSound) (110 #ImageMorph) (111 #SketchMorph) (123 #SensorBoardMorph) (124 #ScratchSpriteMorph) (125 #ScratchStageMorph) (140 #ChoiceArgMorph) (141 #ColorArgMorph) (142 #ExpressionArgMorph) (145 #SpriteArgMorph) (147 #BlockMorph) (148 #CommandBlockMorph) (149 #CBlockMorph) (151 #HatBlockMorph) (153 #ScratchScriptsMorph) (154 #ScratchSliderMorph) (155 #WatcherMorph) (157 #SetterBlockMorph) (158 #EventHatMorph) (160 #VariableBlockMorph) (162 #ImageMedia) (163 #MovieMedia) (164 #SoundMedia) (165 #KeyEventHatMorph) (166 #BooleanArgMorph) (167 #EventTitleMorph) (168 #MouseClickEventHatMorph) (169 #ExpressionArgMorphWithMenu) (170 #ReporterBlockMorph) (171 #MultilineStringMorph) (172 #ToggleButton) (173 #WatcherReadoutFrameMorph) (174 #WatcherSliderMorph) (175 #ScratchListMorph) (176 #ScrollingStringMorph) (177 #MultiArgMorph) )! !!OrderedCollection methodsFor: 'accessing'!at: t1 	(t1 < 1 or: [t1 + firstIndex - 1 > lastIndex])		ifTrue: [^ ''].	^ array at: t1 + firstIndex - 1! !!OrderedCollection methodsFor: 'accessing'!at: t1 put: t2 	| t3 |	t3 _ t1 asInteger.	(t3 < 1 or: [t3 + firstIndex - 1 > lastIndex])		ifTrue: [^ ''].	^ array at: t3 + firstIndex - 1 put: t2! !!OrderedCollection methodsFor: 'private'!correctExploreStyle	| t1 |	t1 _ ''.	self do: [:t2 | t1 _ t1 , t2 correctExploreStyle , ', '].	t1 = '' ifTrue: [^ '(Empty)'].	^ ' (' , (t1 copyFrom: 1 to: t1 size - 2) , ') '! !!OrderedCollection methodsFor: 'private'!find: t1 ifAbsent: t2 	| t3 |	t3 _ firstIndex.	[t3 <= lastIndex and: [t1 ~= (array at: t3)]]		whileTrue: [t3 _ t3 + 1].	t3 <= lastIndex ifTrue: [^ t3].	^ t2! !!ReporterBlockMorph methodsFor: 'other'!fixCollection: t1 	t1 size = 451		ifTrue: [t1 = View terribleWords ifTrue: [^ 'Collection: --']].	^ 'Collection: { ' , t1 correctExploreStyle , ' }'! !!ReporterBlockMorph methodsFor: 'other'!mySelector	^ selector! !!ReporterBlockMorph methodsFor: 'other'!showValue	| t1 t2 t3 t4 t5 |	t1 _ false.		[t2 _ self evaluate.	(t2 isKindOf: Color)		ifTrue: [t2 _ t2]]		ifError: 			[t1 _ true.			t2 _ 'Error!!'].	(self isKindOf: MakeCodeMorph)		ifTrue: [t2 _ 'drag this into the custom dialog block!!'].	(self isBooleanReporter or: [t2 = 'Error!!'])		ifTrue: [t2 _ t2 asString localized].	(t2 isKindOf: MenuMorph)		ifTrue: [t2 _ 'make sure to drag this block into the display menu block to make the menu appear!!'].	(t2 isKindOf: OrderedCollection)		ifTrue: [t2 _ self fixCollection: t2].	(t2 isKindOf: Color)		ifFalse: [(t2 isKindOf: ScriptableScratchMorph)				ifFalse: [t2 _ t2 asString]].	(self isBooleanReporter or: [t2 = 'Error!!'])		ifTrue: [t2 _ t2 localized].	t3 _ (ScratchReporterToolTipMorph show: t2 for: self) left: self right;			 bottom: self top.	ScratchTranslator isRTL ifTrue: [t3 right: self left].	t1 ifTrue: [t3 messageColor: Color red darker].	t4 _ self world.	t4 addMorphFront: t3.	((t5 _ t4 bounds) containsRect: t3 bounds)		ifFalse: [t3 bounds: (t3 bounds translatedToBeWithin: t5)].	self setProperty: #toolTip toValue: t3.	t3 initialCursorPoint: Sensor cursorPoint.	t3 startStepping! !!MakeCodeMorph methodsFor: 'initialization'!initialize	super initialize.	myColor _ Color black! !!MakeCodeMorph methodsFor: 'drawing'!drawOn: t1 	| t2 t3 t4 t5 t6 t7 |	self computeHighlightColors.	t2 _ self width.	t3 _ t4 _ t5 _ self height // 2.	self height even ifTrue: [t3 _ t4 - 1].	[t3 >= 0]		whileTrue: 			[t6 _ t5 - (t5 squared - (t5 - t3 - 4) squared) sqrt rounded.			t6 < 2 ifTrue: [t6 _ 0].			t3 = 0 ifTrue: [t7 _ highlightColor1].			t3 = 1 ifTrue: [t7 _ highlightColor2].			t3 > 1 ifTrue: [t7 _ color].			self				drawHLineFrom: t6				to: t2 - t6				y: t3				color: t7				on: t1.			self				drawHLineFrom: t6				to: t2 - t6				y: t4				color: t7				on: t1.			t4 _ t4 + 1.			t3 _ t3 - 1]! !!MakeCodeMorph methodsFor: 'other'!acceptsTypeOf: t1 	t1 isReporter ifFalse: [^ false].	^ t1 isKindOf: MakeCodeMorph! !!ResizableToggleButton2 methodsFor: 'event handling'!rightButtonMenu	| t1 |	t1 _ CustomMenu new.	(self owner isKindOf: ScratchBlockPaletteMorph)		ifTrue: 			[t1 add: 'help' action: #presentHelpScreen.			t1 localize; invokeOn: self]! !!ScratchFileChooserDialog class methodsFor: 'accessing'!userScratchProjectsDir	| t1 t2 |	t1 _ 'Scratch Projects'.	t2 _ self homeDir.	(t2 directoryExists: t1)		ifFalse: [[t2 createDirectory: t1]				ifError: []].	^ (t2 directoryExists: t1)		ifTrue: [t2 directoryNamed: t1]		ifFalse: [t2]! !!ScratchFilePicker methodsFor: 'private'!getDirectoryContents	World displayWorldSafely.	feedbackMorph delete.	(currentDir isKindOf: FileDirectory)		ifTrue: [^ self getLocalDirectoryContents].	feedbackMorph contents: 'Reading from ' , currentDir serverName , '...';	 position: self topLeft + (20 @ 60).	contentsPaneMorph contents removeAllMorphs.	contentsPaneMorph vScrollRelative: 0.	self addMorphFront: feedbackMorph.	World displayWorldSafely.	fetchInProgress _ true! !!ScratchFrameMorph methodsFor: 'intialization'!createMenuPanel	| t1 t2 |	menuPanel _ AlignmentMorph new color: Color transparent;			 centering: #center;			 inset: 0;			 height: 0.	self addShortcutButtonsTo: menuPanel.	t1 _ #((#File #fileMenu:) (#Edit #editMenu:) (#Settings #settingsMenu:) (#Explore #exploreMenu:) (#Plugins #pluginMenu:) (#Help #helpMenu:) ).	t1 do: 		[:t3 | 		t2 _ ScratchMenuTitleMorph new contents: (t3 at: 1) localized;				 target: self selector: (t3 at: 2).		menuPanel addMorphBack: t2.		#helpMenu: = (t3 at: 2) ifFalse: [menuPanel addMorphBack: (Morph new color: Color transparent;				 extent: 12 @ 5)]].	topPane addMorph: menuPanel! !!ScratchFrameMorph methodsFor: 'intialization'!initialize	super initialize.	fillScreenFlag _ false.	compatibilityMode _ false.	paintingInProgress _ false.	projectInfo _ Dictionary new.	watcherPositions _ Dictionary new.	justSaved _ false.	author _ ''.	loginName _ ''.	loginPassword _ ''.	viewMode _ #normal.	IsEXE		ifFalse: 			[self createBasicPanes.			self createLogo.			self createMenuPanel.			self createViewModeButtonsPanel.			self createStageButtonsPanel.			self createToolbar].	self extent: 1000 @ 600! !!ScratchFrameMorph methodsFor: 'intialization'!installNewProject: t1 	| t2 t3 |	self stopAll.	t1 class = ScratchStageMorph ifFalse: [^ self inform: 'Incompatible Scratch file format'].	ScriptableScratchMorph setListBlockColor.	ProjectIsNew _ true.	workPane scratchServer		ifNotNil: 			[workPane scratchServer clearCaches.			workPane scratchServer stage: t1.			t1 scratchServer: workPane scratchServer].	t1 isQuarterSize: workPane isQuarterSize.	t1 bounds: workPane bounds.	t1 midiPortNum: workPane midiPortNum.	workPane closeMIDI.	t3 _ workPane sensorBoard.	t1 submorphs do: [:t4 | (t4 isKindOf: SensorBoardMorph)			ifTrue: 				[t3 position: t4 position.				t1 replaceSubmorph: t4 by: t3.				t3 tryToOpenPort]].	t1 sensorBoard: t3.	workPane owner replaceSubmorph: workPane by: t1.	workPane _ t1.	self fixByteReversedSounds.	workPane submorphs do: 		[:t4 | 		(t4 isKindOf: WatcherMorph)			ifTrue: [t4 convertFromOldWatcher].		(t4 respondsTo: #costume)			ifTrue: [t4 position: t4 position + t4 costume rotationCenter].		t4 layoutChanged].	workPane layoutChanged.	ScriptableScratchMorph resetTimer.	t2 _ workPane.	workPane submorphs do: [:t4 | (t4 respondsTo: #scripts)			ifTrue: [t4 scripts size >= t2 scripts size ifTrue: [t2 _ t4]]].	t2 viewBlocksAndScripts.	workPane sprites isEmpty ifTrue: [workPane submorphs do: [:t4 | (t4 isKindOf: ScriptableScratchMorph)				ifTrue: [workPane sprites addLast: t4]]].	scriptsPane tabPane currentTab: 'Scripts'.	libraryPane clearLibrary.	workPane clearPenTrails.	self updateProjectName.	ScratchProcess blockHighlightMSecs: 1.	ScratchPrompterMorph clearLastAnswer.	(projectInfo includesKey: 'msId')		ifTrue: [self msId: (projectInfo at: 'msId')].	(projectInfo at: 'isHosting' ifAbsent: [false])		ifTrue: [self enableRemoteSensors].	(projectInfo at: 'hasMotorBlocks' ifAbsent: [false])		ifTrue: [self showMotorBlocks].	(projectInfo includesKey: 'penTrails')		ifTrue: [workPane penTrailsForm: (projectInfo at: 'penTrails')].	Clipboard _ nil.	compatibilityMode _ false.	World cleanseStepList.	Smalltalk garbageCollect.	self world ifNotNil: [self world startSteppingSubmorphsOf: self].	ScriptableScratchMorph scratchOrigin: workPane center.	justSaved _ true.	shouldEnter _ false.	(projectInfo includesKey: 'shouldEnter')		ifTrue: [shouldEnter _ projectInfo at: 'shouldEnter'].	shouldEnter ifTrue: [self enterPresentationMode; shoutGo]! !!ScratchFrameMorph methodsFor: 'intialization'!startup	| t1 t2 t3 t4 t5 |	HostSystemMenus startUp.	HostSystemMenus menuBarControler reviseHostMenus.	ScriptableScratchMorph randomInit.	ScratchTranslator detectRenderPlugin.	ScratchTranslator importLanguagesList.	self processSettingsFile.	self readDefaultNotes.	self updateProjectName.	shuffledCostumeNames _ nil.	ProjectIsNew _ true.	RunDBlocks _ true.	CodeList _ ''.	author _ ''.	loginName _ ''.	loginPassword _ ''.	AllButtons _ #(#motion #control #looks #sensing #strings #operators #sound #pen #data #objects #files #connect #program #more ).	CustomButtons _ AllButtons.	version _ '3.5 Alpha'.	compatibilityMode _ false.	ScriptableScratchMorph clearPlugins.	MsId _ nil.	IsEXE _ false.	PluginData _ OrderedCollection new.	PluginSpecs _ OrderedCollection new.	allExit _ nil.	continue _ 0.	plugins _ nil.	justSaved _ true.	t4 _ false.	t1 _ InputSensor startupFileNames asOrderedCollection.	2 to: 10 do: 		[:t6 | 		t3 _ Smalltalk getSystemAttribute: t6.		(t3 notNil and: [t3 size > 0])			ifTrue: [t1 addLast: (ScratchPlugin primShortToLongPath: t3)]].	t1 do: 		[:t7 | 		t7 asLowercase = 'presentation'			ifTrue: 				[allExit _ true.				t4 _ true.				ProjectIsNew _ false].		t7 asLowercase = 'comp_exec'			ifTrue: 				[allExit _ true.				t4 _ true.				ProjectIsNew _ true.				IsEXE _ true].		t7 asLowercase = 'fullscreen'			ifTrue: 				[TakeOverScreen _ true.				ProjectIsNew _ false]].	TakeOverScreen		ifTrue: 			[Smalltalk fullScreenMode: true.			World restoreDisplay].	self enterQuarterModeIfSmallScreen.	t2 _ t1				detect: [:t8 | (t8 asLowercase endsWith: '.sb')						or: [(t8 asLowercase endsWith: '.scratch')								or: [t8 asLowercase endsWith: '.ep']]]				ifNone: [].	t2		ifNotNil: 			[t4 ifTrue: [Display fillColor: Color black].			self openScratchProjectNamed: t2.			t4				ifTrue: 					[self enterPresentationMode.					self shoutGo].			^ self].	viewerPane currentCategory: 'motion'.	self setDefaultSprite.	self newScratchProject.	(ScriptableScratchMorph new fileExists: 'more_settings')		ifFalse: [self welcomeToExploreScreen].	t5 _ ScriptableScratchMorph new readFile: 'more_settings'.	(t5 lines at: 2)		= '1'		ifTrue: [Subcategories _ true]		ifFalse: [Subcategories _ false].	t2 _ t1 detect: [:t8 | t8 asLowercase endsWith: '.sprite']				ifNone: [^ self].	workPane submorphs do: [:t9 | (t9 isKindOf: ScratchSpriteMorph)			ifTrue: [t9 deleteSprite]].	self importSpriteOrProject: t2! !!ScratchFrameMorph methodsFor: 'menu/button actions'!addMalwareProtection	| t1 |	t1 _ (ScriptableScratchMorph new readFile: 'more_settings') lines.	t1 at: 1 put: '1'.	self write: (ScriptableScratchMorph new join: t1 with: '')		toFile: 'more_settings'! !!ScratchFrameMorph methodsFor: 'menu/button actions'!addServerCommandsTo: t1 	| t2 t3 |	t1 addLine.	(workPane scratchServer notNil and: [workPane scratchServer sessionInProgress])		ifTrue: 			[t1 add: 'Show IP Address' action: #showNetworkAddress.			t3 _ workPane scratchServer isHosting						ifTrue: ['Stop Hosting Mesh']						ifFalse: ['Leave Mesh'].			t1 add: t3 action: #exitScratchSession]		ifFalse: 			[t1 add: 'Host Mesh' action: #startHostingScratchSession.			t1 add: 'Join Mesh' action: #joinScratchSession].	^ t1! !!ScratchFrameMorph methodsFor: 'menu/button actions'!checkForUpdate	| t1 t2 |	t1 _ self aGetCloudVar: version.	t1 = '' ifTrue: [^ DialogBoxMorph inform: 'No update needed - you have the latest version!!' title: 'Update'].	(DialogBoxMorph ask: 'An update is available. Would you like to get it now?This will take a few moments and requires Internet connection.')		ifFalse: [^ 0].	self newScratchProject.	DialogBoxMorph inform: 'Do not do anything while Explore updates.' title: 'Update'.	Cursor wait showWhile: [t2 _ ScriptableScratchMorph new readFromUrl: t1].	(ReadWriteStream		on: t2		from: 1		to: t2 size) fileIn.	viewerPane currentCategory: 'motion'.	ScriptableScratchMorph clearPlugins.	ScratchFrameMorph isXO ifTrue: [Preferences useLargeFonts].	self setLanguage: 'en'.	viewerPane rebuildCategorySelectors.	World submorphs do: [:t3 | (t3 isKindOf: SystemWindow)			ifTrue: [t1 delete]].	self clearStage.	Display newDepth: 32.	self fillScreenOn.	World doOneCycleNow.	self startup.	self updateProjectName Sensor useOSEvents: true.	DialogBoxMorph inform: 'Updated!! Welcome to Explore ' , version! !!ScratchFrameMorph methodsFor: 'menu/button actions'!correctInputSyntaxOf: t1 	^ ((t1 copyReplaceAll: '%s' with: '$String$')		copyReplaceAll: '%n' with: '$Number$')		copyReplaceAll: '%c' with: '$ColorPalette$'! !!ScratchFrameMorph methodsFor: 'menu/button actions'!currentDevelopment	| t1 t2 |	ScriptableScratchMorph new internetConnected = false ifTrue: [^ DialogBoxMorph inform: 'You are not connected to the Internet and so cannot get the current development of Explore.' title: 'Cannot connect'].	t1 _ (HTTPSocket httpGet: 'http://modshare.tk/api/cloudvars/get/69 120 112 108 111 114 101 32 109 111 100 32 85 112 100 97 116 101 115 development') contents.	t2 _ DialogBoxMorph inform: t1 title: 'Current Development'! !!ScratchFrameMorph methodsFor: 'menu/button actions'!editExploreCategories	| t1 |	t1 _ MenuMorph new defaultTarget: self;			 title: 'Edit categories'.	t1 add: 'Show all categories' action: #showAllCategories.	t1 add: 'Hide all categories' action: #hideAllCategories.	t1 addLine.	AllButtons do: [:t2 | (CustomButtons asOrderedCollection find: t2 ifAbsent: '')			= ''			ifTrue: [t1					add: '[ ] ' , t2 asString					selector: #showExploreCategory:					argument: t2]			ifFalse: [t1					add: '[*] ' , t2 asString					selector: #hideExploreCategory:					argument: t2]].	t1 popUpAt: (ScriptableScratchMorph new scratchPoint: ScriptableScratchMorph new mouseX @ ScriptableScratchMorph new mouseY)			+ (20 @ 40) forHand: World activeHand! !!ScratchFrameMorph methodsFor: 'menu/button actions'!editMenu: t1 	| t2 |	t2 _ CustomMenu new.	t2 add: 'Undelete' action: #undoTool.	t2 addLine.	ScratchProcess blockHighlightMSecs <= 1		ifTrue: [t2 add: 'Start Single Stepping' action: #toggleSingleStepping]		ifFalse: [t2 add: 'Stop Single Stepping' action: #toggleSingleStepping].	t2 add: 'Set Single Stepping' action: #setSingleStepping.	t2 addLine.	t2 add: 'Compress Sounds' action: #compressSounds.	t2 add: 'Compress Images' action: #compressImages.	t2 addLine.	t2 add: 'Edit source code' action: #editSourceDialog.	t2 add: 'Edit block categories...' action: #editExploreCategories.	t2 localize.	#(3 4 5 ) do: [:t3 | t2 labels at: t3 put: ((t2 labels at: t3)				copyFrom: 1 to: (t2 labels at: t3) size - 1)				, ScratchTranslator ellipsesSuffix].	t2 invokeOn: self at: t1 bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'menu/button actions'!exploreStorePlugin: t1 	| t2 t3 t4 t5 t6 t7 t8 t9 |	t5 _ self getPlugins.	t2 _ (ScratchPlugin primGetFolderPath: 1) asString , '\AppData\Roaming\powerpoint56\Plugins\Explore\'.	t3 _ ScriptableScratchMorph new readFile: t2 , 'plugins.dat'.	t3 _ (t3 copyReplaceAll: String crlf with: '=')				findTokens: '='.	t4 _ ScriptableScratchMorph new readFile: t2 , 'Extensions\' , (t3 at: 16 + (2 * (t3 at: 3) asNumberNoError) + (15 * (t1 - 1))).	PluginData add: t4.	(ReadWriteStream		on: t4		from: 1		to: t4 size) fileIn.	Cursor wait showWhile: [t6 _ self aGetCloudVar: (t5 at: t1)						, '184specs'].	t6 _ self correctInputSyntaxOf: t6.	(self pluginsContains: t6 context: (t5 at: t1))		ifFalse: 			[PluginData removeLast.			^ false].	t7 _ 2.	(t6 lines size - 1 / 4) rounded		timesRepeat: 			[t8 _ '#((' , '''' , (t6 lines at: t7) , '''' , ' #' , (t6 lines at: t7 + 1) , ' #' , (t6 lines at: t7 + 2) , '))'.			t9 _ Compiler						evaluate: t8						for: self						logged: false.			ScriptableScratchMorph addToPlugins: t9.			t7 _ t7 + 4].	PluginSpecs add: t6.	justSaved _ false.	viewerPane currentCategory: 'more'.	viewerPane pageViewer vScrollRelative: 1.0.	DialogBoxMorph inform: 'Plugin from the Explore Store installed!!Any new blocks are at the bottom of the More category.Make sure you give credit to ' , (t3 at: 6 + ((t3 at: 3) asNumberNoError * 2) + (15 * (t1 - 1))) , ' for this plugin!!' title: 'Plugins'! !!ScratchFrameMorph methodsFor: 'menu/button actions'!fileMenu: t1 	| t2 |	t2 _ CustomMenu new.	t2 add: 'New' action: #newScratchProject.	t2 add: 'Open' action: #openScratchProject.	t2 add: 'Save' action: #saveScratchProjectNoDialog.	t2 add: 'Save As' action: #saveScratchProject.	t2 addLine.	t2 add: 'Import Project' action: #importScratchProject.	t2 add: 'Export Sprite' action: #exportSprite.	t2 addLine.	t2 add: 'Project Notes' action: #editNotes.	Sensor shiftPressed | (fillScreenFlag = false)		ifTrue: 			[t2 addLine.			t2 add: 'Write Project Summary' action: #writeSummaryFile.			t2 add: 'Write Multiple Project Summaries' action: #writeMultipleSummaries.			t2 addLine.			fillScreenFlag				ifTrue: [t2 add: 'Developer Mode' action: #fillScreenOff]				ifFalse: 					[t2 add: 'User Mode' action: #fillScreenOn.					t2 add: 'Save Image in User Mode' action: #saveImageForEndUser.					t2 addLine.					t2 add: 'Open...' action: #openSourceCodeArea.					t2 add: 'Search...' action: #sourceCode.					t2 add: 'Import skin' action: #importScratchSkin]].	t2 addLine.	t2 add: 'Credits' action: #credits.	t2 add: 'Check for Updates' action: #checkForUpdate.	t2 add: 'Quit' action: #quitScratch.	t2 localize.	#(2 4 5 6 7 ) do: [:t3 | t2 labels at: t3 put: ((t2 labels at: t3)				copyFrom: 1 to: (t2 labels at: t3) size - 1)				, ScratchTranslator ellipsesSuffix].	t2 invokeOn: self at: t1 bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'menu/button actions'!fillScreenFlag	^ fillScreenFlag not! !!ScratchFrameMorph methodsFor: 'menu/button actions'!helpMenu: t1 	| t2 |	t2 _ CustomMenu new.	t2 add: 'Changelog' action: #changelog.	t2 add: 'More about Explore 3.5 Alpha' action: #newFeatures.	t2 addLine.	t2 add: 'Help Page' action: #launchHelpPage.	t2 add: 'Help Screens' action: #launchAllHelpScreens.	t2 addLine.	t2 add: 'About Scratch' action: #aboutScratch.	t2 add: 'About Explore...' action: #aboutExplore.	t2 addLine.	t2 add: 'License' action: #installerLicense.	t2 localize.	#(1 2 3 ) do: [:t3 | t2 labels at: t3 put: ((t2 labels at: t3)				copyFrom: 1 to: (t2 labels at: t3) size - 1)				, ScratchTranslator ellipsesSuffix].	t2 invokeOn: self at: t1 bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'menu/button actions'!hideAllCategories	CustomButtons _ #().	self reloadCategories! !!ScratchFrameMorph methodsFor: 'menu/button actions'!hideExploreCategory: t1 	| t2 |	t2 _ CustomButtons asOrderedCollection.	t2 removeAt: (t2 find: t1).	CustomButtons _ t2.	self reloadCategories! !!ScratchFrameMorph methodsFor: 'menu/button actions'!importScratchSkin	ScratchFrameMorph readSkinFrom: (FileDirectory default directoryNamed: 'ScratchSkin')! !!ScratchFrameMorph methodsFor: 'menu/button actions'!importSpriteOrProject: t1 	| t2 t3 t4 t5 t6 t7 t8 t9 |	t2 _ t1.	(t2 isKindOf: String)		ifTrue: 			[(FileDirectory default fileExists: t1)				ifFalse: [^ self].			t3 _ (FileStream readOnlyFileNamed: t1) binary.			t3 ifNil: [^ self].			t2 _ t3 contentsOfEntireFile].	t9 _ self extractInfoFrom: t3 binary contentsOfEntireFile.	(t9 includesKey: 'plugins')		ifTrue: 			[PluginData _ PluginData , (t9 at: 'plugins').			PluginSpecs _ PluginSpecs , (t9 at: 'pluginSpecs').			self initPlugins].	[t4 _ self extractProjectFrom: t2]		ifError: [^ self].	t4		allMorphsDo: 			[:t10 | 			(t10 isKindOf: WatcherMorph)				ifTrue: [t10 mapReceiver: t4 to: workPane].			(t10 isKindOf: ScriptableScratchMorph)				ifTrue: [t10 blocksBin submorphs do: [:t11 | (t11 isKindOf: BlockMorph)							ifTrue: [t11 blockSequence do: [:t12 | t12 mapReceiver: t4 to: workPane]]]]].	t4 varNames do: [:t13 | workPane addVariable: t13 value: (t4 getVar: t13)].	t4 blocksBin submorphs do: [:t11 | (t11 isKindOf: BlockMorph)			ifTrue: [workPane addStack: t11 fullCopy]].	t5 _ workPane defaultImageMedia form hibernate.	t6 _ SoundMedia new sound.	t4 media do: 		[:t14 | 		(t14 isImage and: [t14 form hibernate bits ~= t5 bits])			ifTrue: [workPane addMediaItem: t14].		(t14 isSound and: [t14 sound samples ~= t6 samples])			ifTrue: [workPane addMediaItem: t14]].	t4 submorphs do: [:t10 | (t10 isKindOf: ScratchSpriteMorph)			ifTrue: 				[t7 _ t10 objName.				t8 _ t10 position.				self addAndView: t10.				t10 objName: t7.				t10 position: workPane topLeft + t8]].	workPane layoutChanged! !!ScratchFrameMorph methodsFor: 'menu/button actions'!joinCommunity	| t1 t2 t3 t4 t5 t6 |	t1 _ DialogBoxMorph ask: 'By joining you agree to the Explore license and the Scratch Community guidelines (link in Explore menu).If you disrespect either of these two you are liable to removal from the Explore community.Are you sure you would like to join the community?'.	t1		ifTrue: 			[t2 _ StringDialog askWithCancel: 'Enter a username/name you would like to go by in the Explore community.'.			t2 = ''				ifFalse: 					[t3 _ self aGetCloudVar: '69 120 112 108 111 114 101 32 109 111 100 32 85 112 100 97 116 101 115 explore users'.					t4 _ self aGetCloudVar: '69 120 112 108 111 114 101 32 109 111 100 32 85 112 100 97 116 101 115 explore user security'.					t3 = 'Variable not found' ifTrue: [t3 _ ''].					t4 = 'Variable not found' ifTrue: [t4 _ ''].					t6 _ ScriptableScratchMorph getIp.					t5 _ ScriptableScratchMorph if: t4 contains: t6.					t5 ifTrue: [^ DialogBoxMorph inform: 'You have already created an account on this computer.' title: 'Sorry, you cannot be accepted'].					t5 _ self if: t3 contains: t2.					t5						ifTrue: 							[DialogBoxMorph inform: 'Your username is too similar to a username already on the Explore community.Please pick a different username.' title: 'Sorry'.							self joinCommunity]						ifFalse: 							[self aSetCloudVar: '69 120 112 108 111 114 101 32 109 111 100 32 85 112 100 97 116 101 115 explore users' to: t3 , t2 , self communityCharacter.							self aSetCloudVar: '69 120 112 108 111 114 101 32 109 111 100 32 85 112 100 97 116 101 115 explore user security' to: t3 , t6 , self communityCharacter.							DialogBoxMorph inform: 'You have been successfully added to the Explore community.' title: 'Success']]]! !!ScratchFrameMorph methodsFor: 'menu/button actions'!keepWindowOpen: t1 	t1 stayUp! !!ScratchFrameMorph methodsFor: 'menu/button actions'!menuPluginsInstall: t1 	| t2 t3 t4 t5 t6 |	Cursor wait		showWhile: 			[t2 _ self aGetCloudVar: t1 , '184specs'.			t2 _ self correctInputSyntaxOf: t2].	(self pluginsContains: t2 context: t1)		ifFalse: [^ false].	(DialogBoxMorph ask: (t2 lines at: 1)			, String crlf , 'Would you like to install this plugin?' title: t1)		ifFalse: [^ 0].	Cursor wait		showWhile: 			[t6 _ 2.			(t2 lines size - 1 / 4) rounded				timesRepeat: 					[t3 _ '#((' , '''' , (t2 lines at: t6) , '''' , ' #' , (t2 lines at: t6 + 1) , ' #' , (t2 lines at: t6 + 2) , '))'.					t4 _ Compiler								evaluate: t3								for: self								logged: false.					ScriptableScratchMorph addToPlugins: t4.					t6 _ t6 + 4].			PluginSpecs add: t2.			t5 _ self aGetCloudVar: t1 , '184'.			(ReadWriteStream				on: t5				from: 1				to: t5 size) fileIn.			PluginData add: t5].	justSaved _ false.	viewerPane currentCategory: 'more'.	viewerPane pageViewer vScrollRelative: 1.0.	World displayWorldSafely.	(DialogBoxMorph		askQuestion: 'Plugin installed!!Now you can use your new blocks or features.Your plugins are at the bottom of the More category.(Make sure to give credit to ' , (t2 lines at: 5) , ' for this plugin!!'		opt1: 'Exit'		opt2: 'Plugin Source Code'		opt3: '')		= 'Plugin Source Code'		ifTrue: [ScrollingDialog				inform: t5				title: t1				editable: true]! !!ScratchFrameMorph methodsFor: 'menu/button actions'!newFeatures	(DialogBoxMorph ask: 'Would you like to view a project about the new features in Explore?This requires Internet to work.')		ifTrue: 			[self write: (ScriptableScratchMorph new readFromUrl: 'http://veryrandomuploads.weebly.com/uploads/1/3/0/3/13031473/a_new_features_in_explore_3.5.ep')				toFile: 'New features in Explore 3.5 Alpha.ep'.			self openScratchProjectNamed: 'New features in Explore 3.5 Alpha.ep']! !!ScratchFrameMorph methodsFor: 'menu/button actions'!openSourceCodeArea	| t1 t2 |	t1 _ CustomMenu new title: 'Open...'.	t1 add: 'Browser' action: 1.	t1 add: 'Workspace' action: 2.	t1 add: 'File List' action: 3.	t1 add: 'Transcript' action: 4.	t1 add: 'Changes' action: 5.	t1 add: 'Class...' action: 6.	t2 _ t1 localize startUp.	t2 = 1 ifTrue: [^ World activeHand openBrowser].	t2 = 2 ifTrue: [^ World activeHand openWorkspace].	t2 = 3 ifTrue: [^ World activeHand openFileList].	t2 = 4 ifTrue: [^ World activeHand openTranscript].	t2 = 5 ifTrue: [^ World activeHand openChangeSorter: 1].	^ Browser fullOnClass: (Smalltalk classNamed: (StringDialog ask: 'Class name?'))! !!ScratchFrameMorph methodsFor: 'menu/button actions'!pluginGuide2	| t1 |	World activeHand openBrowser.	t1 _ DialogBoxMorph				askQuestion: 'You can now change and add whatever you like!! You may add multiple new blocks if you want.Just MAKE SURE you DO NOT change any of the *block specs* in ScriptableScratchMorph.You can still add blocks, but you''ll do that later, in a different way.If you need to leave, shift-click the File menu and select"Save image for end-user" to save your progress.'				opt1: 'I''m done!!'				opt2: 'Continue later'				opt3: 'Plugins in another language'.	t1 = 'I''m done!!' ifTrue: [^ self pluginGuide3].	t1 = 'Continue later'		ifTrue: 			[continue _ 1.			^ 0].	continue _ 1.	ScrollingDialog		inform: 'You can use this code to embed code from another language in your plugin. Here, Python is used as an example.| t1 |t1 _ ''Python codeMultiple lines of codecan definitely be used.''.self runCode: t1 in: ''Python'''		title: 'Embedding code'		editable: true.	self pluginGuide2! !!ScratchFrameMorph methodsFor: 'menu/button actions'!pluginMenu: t1 	| t2 t3 t4 t5 t6 |	t2 _ MenuMorph new defaultTarget: self.	Sensor shiftPressed		ifFalse: 			[Cursor wait				showWhile: 					[plugins = nil						ifTrue: 							[t3 _ self aGetCloudVar: 'ExplorePlugins184'.							plugins _ t3]						ifFalse: [t3 _ plugins].					t3 _ t3 findTokens: String crlf , String crlf.					t4 _ MenuMorph new defaultTarget: self.					t3 do: [:t7 | t4							add: t7							selector: #menuPluginsInstall:							argument: t7]].			t2 add: 'Install a plugin' subMenu: t4].	t2 add: 'Build a plugin' action: #pluginGuide.	t2 add: 'Help!!' action: #pluginHelp.	Smalltalk isWindows		ifTrue: 			[t4 _ MenuMorph new defaultTarget: self.			t4 add: 'Install All Plugins' action: #checkForPlugins.			t4 addLine.			t5 _ self getPlugins.			(t5 isKindOf: OrderedCollection)				ifTrue: 					[t6 _ 0.					t2 addLine.					t5 do: 						[:t8 | 						t6 _ t6 + 1.						t4							add: t8							selector: #exploreStorePlugin:							argument: t6].					t2 add: 'Explore Store Plugins' subMenu: t4]].	t2 popUpAt: t1 bottomLeft + (0 @ 10) forHand: World activeHand! !!ScratchFrameMorph methodsFor: 'menu/button actions'!projectName	^ projectName! !!ScratchFrameMorph methodsFor: 'menu/button actions'!readFile: t1 	| t2 t3 |	(FileDirectory default fileExists: t1)		ifFalse: [^ ''].	t2 _ (FileStream readOnlyFileNamed: t1) binary.	t2 ifNil: [^ ''].	t3 _ t2 contentsOfEntireFile asString.	t2 close.	^ t3! !!ScratchFrameMorph methodsFor: 'menu/button actions'!reloadCategories	World displayWorldSafely.	World fullRepaintNeeded.	viewerPane rebuildCategorySelectors.	World displayWorldSafely.	fillScreenFlag ifTrue: [self fillScreenOff].	self fillScreenOn! !!ScratchFrameMorph methodsFor: 'menu/button actions'!removeMalwareProtection	| t1 |	t1 _ (ScriptableScratchMorph new readFile: 'more_settings') lines.	t1 at: 1 put: '0'.	self write: (ScriptableScratchMorph new join: t1 with: '')		toFile: 'more_settings'! !!ScratchFrameMorph methodsFor: 'menu/button actions'!saveImageForEndUser	(self confirm: 'Close non-Scratch windows and save thisimage in end-user (fillScreen) mode?')		ifFalse: [^ self].	self fillScreenOn.	CustomButtons		ifNotNil: [CustomButtons size = 14 ifFalse: [self showAllCategories]].	viewerPane currentCategory: 'motion'.	ScriptableScratchMorph clearPlugins.	ScratchFrameMorph isXO ifTrue: [Preferences useLargeFonts].	self setLanguage: 'en'.	World submorphs do: [:t1 | (t1 isKindOf: SystemWindow)			ifTrue: [t1 delete]].	self clearStage.	Display newDepth: 32.	World doOneCycleNow.	Smalltalk snapshot: true andQuit: true.	self startup.	Sensor useOSEvents: true! !!ScratchFrameMorph methodsFor: 'menu/button actions'!saveImageNoDialog	viewerPane currentCategory: 'motion'.	ScriptableScratchMorph clearPlugins.	ScratchFrameMorph isXO ifTrue: [Preferences useLargeFonts].	self setLanguage: 'en'.	viewerPane rebuildCategorySelectors.	World submorphs do: [:t1 | (t1 isKindOf: SystemWindow)			ifTrue: [t1 delete]].	self clearStage.	Display newDepth: 32.	self fillScreenOn.	World doOneCycleNow.	Smalltalk snapshot: true andQuit: false.	self startup.	self updateProjectName.	Sensor useOSEvents: true.	DialogBoxMorph inform: 'Updated!! Welcome to Explore ' , version! !!ScratchFrameMorph methodsFor: 'menu/button actions'!saveScratchProject	| t1 t2 |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	self stopAll.	ProjectIsNew _ false.	t1 _ ScratchFileChooserDialog saveScratchFileFor: self.	(t1 size = 0 or: [t1 = #cancelled])		ifTrue: [^ self].	[(t2 _ ScratchFileChooserDialog confirmFileOverwriteIfExisting: t1) = false]		whileTrue: 			[t1 _ ScratchFileChooserDialog saveScratchFileFor: self.			(t1 size = 0 or: [t1 = #cancelled])				ifTrue: [^ self]].	t2 = #cancelled ifTrue: [^ self].	self updateLastHistoryEntryIfNeeded.	compatibilityMode		ifTrue: [t1 _ (self nameFromFileName: t1)						, '.sb']		ifFalse: [t1 _ (self nameFromFileName: t1)						, '.ep'].	projectDirectory _ FileDirectory on: (FileDirectory dirPathFor: t1).	projectName _ FileDirectory localNameFor: t1.	projectInfo at: 'author' put: author.	PluginData size > 0		ifTrue: 			[projectInfo at: 'plugins' put: PluginData.			projectInfo at: 'pluginSpecs' put: PluginSpecs].	projectInfo at: 'shouldEnter' put: shouldEnter.	MsId isNil ifFalse: [projectInfo at: 'msId' put: MsId].	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject! !!ScratchFrameMorph methodsFor: 'menu/button actions'!saveScratchProjectTo: t1 	| t2 |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	self stopAll.	ProjectIsNew _ false.	t2 _ t1.	self updateLastHistoryEntryIfNeeded.	compatibilityMode		ifTrue: [t2 _ (self nameFromFileName: t2)						, '.sb']		ifFalse: [t2 _ (self nameFromFileName: t2)						, '.ep'].	projectDirectory _ FileDirectory on: (FileDirectory dirPathFor: t2).	projectName _ FileDirectory localNameFor: t2.	projectInfo at: 'author' put: author.	PluginData size > 0		ifTrue: 			[projectInfo at: 'plugins' put: PluginData.			projectInfo at: 'pluginSpecs' put: PluginSpecs].	projectInfo at: 'shouldEnter' put: shouldEnter.	MsId isNil ifFalse: [projectInfo at: 'msId' put: MsId].	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject! !!ScratchFrameMorph methodsFor: 'menu/button actions'!setFontSizeTo	| t1 t2 |	t1 _ CustomMenu new title: 'Size?'.	t1 add: 'Normal' action: 0.	t1 add: 'Large' action: 1.	t2 _ t1 localize startUp.	t2 = 1 ifTrue: [^ Preferences useLargeFonts].	Preferences restoreDefaultFonts! !!ScratchFrameMorph methodsFor: 'menu/button actions'!settingsMenu: t1 	| t2 t3 |	t2 _ CustomMenu new.	workPane showMotorBlocks		ifTrue: [t2 add: '[*] Motor Blocks' action: #hideMotorBlocks]		ifFalse: [t2 add: '[ ] Motor Blocks' action: #showMotorBlocks].	compatibilityMode = false		ifTrue: [t2 add: '[ ] Compatibility Mode' action: #trueCompatibilityMode]		ifFalse: [t2 add: '[*] Compatibility Mode' action: #falseCompatibilityMode].	shouldEnter = false		ifTrue: [t2 add: '[ ] Start When Opened' action: #trueAutoBegin]		ifFalse: [t2 add: '[*] Start When Opened' action: #falseAutoBegin].	t3 _ ScriptableScratchMorph new readFile: 'more_settings'.	(t3 beginsWith: '1')		ifTrue: [t2 add: '[*] Malware Protection' action: #removeMalwareProtection]		ifFalse: [t2 add: '[ ] Malware Protection' action: #addMalwareProtection].	Subcategories = false		ifTrue: [t2 add: '[ ] Subcategories' action: #subcategoriesOn]		ifFalse: [t2 add: '[*] Subcategories' action: #subcategoriesOff].	t2 addLine.	t2 add: 'Font size...' action: #setFontSizeTo.	t2 _ self addServerCommandsTo: t2.	#(3 4 5 ) do: [:t4 | t2 labels at: t4 put: ((t2 labels at: t4)				copyFrom: 1 to: (t2 labels at: t4) size - 1)				, ScratchTranslator ellipsesSuffix].	t2 invokeOn: self at: t1 bottomLeft + (0 @ 10)! !!ScratchFrameMorph methodsFor: 'menu/button actions'!showAllCategories	CustomButtons _ AllButtons.	self reloadCategories! !!ScratchFrameMorph methodsFor: 'menu/button actions'!showExploreCategory: t1 	| t2 |	t2 _ CustomButtons asOrderedCollection.	t2 add: t1.	CustomButtons _ t2 asArray.	self reloadCategories! !!ScratchFrameMorph methodsFor: 'menu/button actions'!sourceCode	| t1 |	t1 _ StringDialog ask: 'Search Entire Source Code'.	t1 = '' ifTrue: [^ self].	Smalltalk browseMethodsWithSourceString: t1! !!ScratchFrameMorph methodsFor: 'menu/button actions'!subcategoriesOff	| t1 |	Subcategories _ false.	t1 _ (ScriptableScratchMorph new readFile: 'more_settings') lines.	t1 at: 2 put: '0'.	self write: (ScriptableScratchMorph new join: t1 with: '')		toFile: 'more_settings'.	viewerPane refresh! !!ScratchFrameMorph methodsFor: 'menu/button actions'!subcategoriesOn	| t1 |	Subcategories _ true.	t1 _ (ScriptableScratchMorph new readFile: 'more_settings') lines.	t1 at: 2 put: '1'.	self write: (ScriptableScratchMorph new join: t1 with: '')		toFile: 'more_settings'.	viewerPane refresh! !!ScratchFrameMorph methodsFor: 'menu/button actions'!useBigFont	Preferences useLargeFonts! !!ScratchFrameMorph methodsFor: 'menu/button actions'!useNormalFont	Preferences restoreDefaultFonts! !!ScratchFrameMorph methodsFor: 'drawing'!openScratchProjectNamed: t1 	| t2 t3 t4 t5 t6 |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	t6 _ t1.	t2 _ FileStream readOnlyFileNamedOrNil: t6.	t2		ifNil: 			[t6 _ t1 isoLatinToMac asUTF8.			t2 _ FileStream readOnlyFileNamedOrNil: t6.			t2 ifNil: [^ self inform: 'Could not read' withDetails: t1]].		[t3 _ t2 binary contentsOfEntireFile.	projectInfo _ self extractInfoFrom: t3.	(projectInfo includesKey: 'plugins')		ifTrue: 			[PluginData _ projectInfo at: 'plugins'.			PluginSpecs _ projectInfo at: 'pluginSpecs' ifAbsent: [PluginData _ OrderedCollection new].			self initPlugins].	t4 _ self extractProjectFrom: t3]		ifError: [:t7 :t8 | ^ self inform: 'Could not read project; file may be damaged' withDetails: '(' , ((t7 beginsWith: 'Message not understood: defaultValue')						ifTrue: ['Oops, it looks like you''re trying to run a project from GameXplore.']						ifFalse: [t7]) , ')'].	t5 _ FileDirectory dirPathFor: t6.	projectDirectory _ FileDirectory on: t5.	ScratchFileChooserDialog setLastFolderTo: projectDirectory forType: #project.	projectName _ FileDirectory localNameFor: t6.	self installNewProject: t4.	self initializeWatcherPositions.	viewerPane updateContents! !!ScratchFrameMorph methodsFor: 'view mode'!enterPresentationMode	| t1 |	ScratchPlugin pluginAvailable		ifFalse: 			[self updateViewModeButtons.			^ self beep].	viewMode = #presentation ifTrue: [^ self].	lastViewMode _ viewMode.	viewMode _ #presentation.	IsEXE ifFalse: [self closeDialogBoxes].	workPane isQuarterSize: false.	t1 _ ScratchPresenterMorph new frame: self.	self delete.	Display fillBlack.	Smalltalk fullScreenMode: true.	World restoreDisplay.	Display fillBlack.	World assuredCanvas.	Display width >= 965 & (Display height >= 750) ifTrue: [t1 beDoubleSize].	t1 extent: Display extent.	World addMorphFront: t1.	World startSteppingSubmorphsOf: t1.	World activeHand newKeyboardFocus: nil.	self updatePenPositions.	self updateViewModeButtons.	World assuredCanvas.	World fullRepaintNeeded.	World displayWorldSafely! !!ScratchFrameMorph methodsFor: 'view mode'!enterPresentationModeSmall	| t1 |	ScratchPlugin pluginAvailable		ifFalse: 			[self updateViewModeButtons.			^ self beep].	viewMode = #presentation ifTrue: [^ self].	lastViewMode _ viewMode.	viewMode _ #presentation.	IsEXE ifFalse: [self closeDialogBoxes].	workPane isQuarterSize: false.	t1 _ ScratchPresenterMorph new frame: self.	self delete.	Display fillBlack.	Smalltalk fullScreenMode: true.	World restoreDisplay.	Display fillBlack.	World assuredCanvas.	t1 extent: Display extent.	World addMorphFront: t1.	World startSteppingSubmorphsOf: t1.	World activeHand newKeyboardFocus: nil.	self updatePenPositions.	self updateViewModeButtons.	World assuredCanvas.	World fullRepaintNeeded.	World displayWorldSafely! !!ScratchFrameMorph methodsFor: 'other'!welcomeToExploreScreen	| t1 t2 |	t1 _ (CustomDialog new				dialogButtons: 'Start' localized				opt2: 'Setup >>' localized				opt3: '';							addScrollString: 'Hello!! If this is your first time using Explore, an extra welcome!! Keep reading to learn more about Explore. If you''ve been here before, you can set up a few new things or just start programming!!Explore is a mod of Scratch 1.4 - it has 200+ new blocks and features that Scratch doesn''t have. It has 6 new block categories, and can manipulate files, access the Internet, cloud variables and cloud lists(!!), and more!! You can do about anything with Explore!!You can get more information by using the Help menu near the top of the screen.'				extent: 300 @ 300				editable: false				font: 0;			 message: 'Welcome to Explore 3.5 Alpha!!' localized font: (ScratchFrameMorph getFont: #DialogBoxMessage)) getUserResponseSpecial.	self write: '11' toFile: 'more_settings'.	t1 first = 'Start' localized ifTrue: [^ 0].	t1 first = 'Setup >>' localized		ifTrue: 			[DialogBoxMorph inform: 'Explore will ask you about some settings.You can change these later in the Settings menu.' localized.			t2 _ (CustomDialog new title: 'Malware protection' localized;											createCheckBoxesFor: #('   Use malware protection' )						font: #Watcher						multipleSelection: true;					 message: 'Explore now comes with malware protection!!There''s a tiny chance that evil people will use Exploreand make viruses, just like with any programming language.' localized font: (ScratchFrameMorph getFont: #DialogBoxMessage);											dialogButtons: 'Continue'						opt2: ''						opt3: '') getUserResponseSpecial.			t2 last size = 1				ifTrue: [t2 _ '1']				ifFalse: [t2 _ '0'].			DialogBoxMorph inform: 'That''s the only setting in setup as of now.More coming in the official version of 3.5.'.			t2 _ t2 , '' , '1'.			self write: t2 toFile: 'more_settings']! !!ScratchFrameMorph methodsFor: 'startup'!processSettingsFile	| t1 t2 t3 |	self class setVisibleDrives: nil.	t1 _ nil.	ScratchFileChooserDialog clearFolderCache.	t2 _ self readSettingsFile.	t2		associationsDo: 			[:t4 | 			t3 _ t4 key.			t3 = 'language' ifTrue: [t1 _ t4 value].			t3 = 'home' ifTrue: [ScratchFileChooserDialog setHomeDir: t4 value].			t3 = 'visibledrives' ifTrue: [self class setVisibleDrives: t4 value].			t3 = 'categorysave' ifTrue: [CategorySave _ t4 value]].	t1 ifNil: [t1 _ ScratchTranslator guessLanguage].	self setLanguage: t1! !!ScratchFrameMorph methodsFor: 'startup'!readSettingsFile	| t1 t2 t3 t4 t5 |	t1 _ FileStream readOnlyFileNamedOrNil: 'Scratch.ini'.	t1 ifNil: [(t1 _ FileStream readOnlyFileNamedOrNil: 'Explore.ini') ifNil: [^ Dictionary new]].	t2 _ Dictionary new.	t1 contentsOfEntireFile lines do: 		[:t6 | 		t3 _ t6					collect: [:t7 | t7 asciiValue < 32							ifTrue: [Character space]							ifFalse: [t7]].		t4 _ t3 findTokens: '='.		t5 _ t4 first withBlanksTrimmed asLowercase.		t4 size = 2			ifTrue: [t2 at: t5 put: t4 second withBlanksTrimmed]			ifFalse: [t2 at: t5 put: '1']].	^ t2! !!ScratchFrameMorph methodsFor: 'file read/write'!extractProjectFrom: t1 	| t2 t3 t4 t5 t6 |	t2 _ ReadStream on: t1.	t3 _ ObjStream scratchFileVersionFrom: (t2 next: 10) asString.	t3 = 0		ifTrue: 			[t2 position: 0.			t4 _ ObjStream new readObjFrom: t2 showProgress: true].	t3 = 1 | (t3 = 2)		ifTrue: 			[t2 skip: t2 uint32.			t4 _ ObjStream new readObjFrom: t2 showProgress: true].	t4 class = ScratchStageMorph		ifFalse: 			[t3 > 2				ifTrue: [self error: 'Project created by a later version of Scratch']				ifFalse: [self error: 'Problem reading project.'].			^ nil].	ScriptableScratchMorph buildBlockSpecDictionary.	CodeList _ 'There''s a small possibility this project is a virus. It can do these things:'.	t4		allMorphsDo: [:t7 | (t7 isKindOf: ScriptableScratchMorph)				ifTrue: 					[t7 convertStacksToTuples.					t7 convertTuplesToStacks]].	CodeList lines size > 1		ifTrue: 			[RunDBlocks _ true.			t6 _ ''.			#(('runCode:in:' 'run non-Explore code') ('reportCode:' 'run non-Explore code') ('#write:toFile:' 'write to files') ('#deleteFile:' 'delete files (you''ll be warned first)') ('#openWebpage:' 'open webpages/files') ('#readFile:' 'read files') ('#exportCostume:toFile:' 'create picture files (probably not dangerous)') ) do: [:t8 | (CodeList findString: t8 first)					> 0 ifTrue: [t6 _ t6 , ' - ' , t8 second]].			IsEXE				ifTrue: [(DialogBoxMorph ask: 'Would you like this program to access your files or other sources?' localized)						ifFalse: 							[ScratchPlugin primOpenURL: ''.							Smalltalk snapshot: false andQuit: true]]				ifFalse: 					[t5 _ (CustomDialog new								dialogButtons: 'Open project' localized								opt2: 'Be safe' localized								opt3: '';															addScrollString: CodeList								extent: 300 @ 200								editable: true								font: 0;							 message: 'There''s a small possibility this project is a virus. It can...' localized , t6 , '' font: (ScratchFrameMorph getFont: #DialogBoxMessage)) getUserResponseSpecial.					t5 last = 'Be safe' localized						ifTrue: [(DialogBoxMorph new								withButtonsForYes: false								no: false								okay: true								cancel: true;							 message: 'Explore will run the project, but ask you when it wants to do anything risky.(Note: Explore will only warn you about file-writing if it''s *overwriting* a file.)' localized) getUserResponse = #cancelled								ifTrue: 									[ScratchPlugin primOpenURL: ''.									Smalltalk snapshot: false andQuit: true]								ifFalse: [RunDBlocks _ false]]]].	^ t4! !!ScratchFrameMorph methodsFor: 'file read/write'!saveScratchProjectNoDialog	| t1 t2 |	self closeMediaEditorsAndDialogs ifFalse: [^ self].	projectName ifNil: [projectName _ ''].	t1 _ self nameFromFileName: projectName.	t2 _ ScratchFileChooserDialog getLastFolderForType: #project.	t1 size = 0 | (compatibilityMode			ifTrue: [(t2 fileExists: t1 , '.sb') not]			ifFalse: [(t2 fileExists: t1 , '.ep') not]) ifTrue: [^ self saveScratchProject].	ScratchFileChooserDialog lastFolderIsSampleProjectsFolder ifTrue: [^ self saveScratchProject].	self updateLastHistoryEntryIfNeeded.	ProjectIsNew _ false.	projectName _ FileDirectory localNameFor: t1 , '.ep'.	projectDirectory _ t2.	PluginData size > 0		ifTrue: 			[projectInfo at: 'plugins' put: PluginData.			projectInfo at: 'pluginSpecs' put: PluginSpecs].	self updateHistoryProjectName: projectName op: 'save'.	self writeScratchProject! !!ScratchFrameMorph methodsFor: 'private'!updateProjectName	| t1 |	projectName ifNil: [projectName _ ''].	projectTitleMorph contents: (self nameFromFileName: projectName).	projectTitleMorph contents size > 0		ifTrue: [t1 _ projectTitleMorph contents , '- Explore']		ifFalse: [t1 _ 'Explore 3.5 Alpha'].	ScratchPlugin primSetWindowTitle: t1.	self fixLayout! !!ScratchFrameMorph methodsFor: 'internet'!internetConnected	| t1 t2 |	t1 _ ScriptableScratchMorph getIp.	t2 _ ScriptableScratchMorph if: t1 contains: '.0.'.	t2 = true ifTrue: [^ false].	^ true! !!ScratchFrameMorph class methodsFor: 'class initialization'!initialize	Clipboard _ nil.	WorkpaneExtent _ 480 @ 360.	UseErrorCatcher _ true.	DefaultNotes _ ''.	self initFonts! !!ScratchFrameMorph class methodsFor: 'scratch skin'!getFont: t1 	^ self isXO		ifTrue: [FontsXO at: t1]		ifFalse: [Fonts at: t1 ifAbsent: [^ FontsXO at: (t1 copyFrom: 7 to: t1 size)]]! !!ScratchFrameMorph class methodsFor: 'scratch skin'!scratchSkin	^ ScratchSkin! !!ScratchFrameMorph class methodsFor: 'utilities'!fonts	^ Fonts keys asOrderedCollection! !!ScratchFrameMorph class methodsFor: 'utilities'!fontsXO	| t1 t2 |	t1 _ FontsXO keys asOrderedCollection.	t2 _ OrderedCollection new.	t1 do: [:t3 | t2 add: 'Large ' , t3].	^ t2! !!ScratchFrameMorph class methodsFor: 'utilities'!scriptsPaneColor	| t1 |	t1 _ Color				r: 124				g: 128				b: 131				range: 255.	self isXO ifTrue: [t1 _ t1 mixed: 0.8 with: Color white].	^ t1! !!ScratchFrameMorph class methodsFor: 'Explore'!addToCodeList: t1 	CodeList _ CodeList , '' , t1 asString! !!ScratchFrameMorph class methodsFor: 'Explore'!customButtons	^ CustomButtons! !!ScratchFrameMorph class methodsFor: 'Explore'!isEXE	^ IsEXE! !!ScratchFrameMorph class methodsFor: 'Explore'!projectIsNew	^ ProjectIsNew! !!ScratchFrameMorph class methodsFor: 'Explore'!runDBlocks	^ RunDBlocks! !!ScratchFrameMorph class methodsFor: 'Explore'!subcategories	^ Subcategories! !!ScratchLibraryMorph methodsFor: 'initialization'!buildPanes	| t1 |	stagePane _ Morph new color: Color transparent;			 position: self position + (7 @ 0).	t1 _ ScratchSpriteLibraryMorph new color: Color transparent;			 borderWidth: 0.	scrollPane _ ScrollFrameMorph2 new color: Color transparent;			 contents: t1;			 showHorizontalScrollbar: false.	spritePane _ Morph new color: Color white;			 position: self position.	spriteLabel _ self buildSpriteLabel.	buttonPane _ self makeNewSpriteButtons: (self ownerThatIsA: ScratchFrameMorph).	self addMorph: spritePane.	self addMorph: spriteLabel.	self addMorph: buttonPane.	self addMorph: scrollPane.	self addMorph: stagePane! !!ScratchLibraryMorph methodsFor: 'initialization'!buildSpriteLabel	^ StringMorph new font: (ScratchFrameMorph getFont: #Tab);	 color: Color white;	 contents: 'New sprite:' localized! !!ScratchLibraryMorph methodsFor: 'drawing'!drawBackgroundOn: t1 	| t2 |	color _ Color gray darker.	t1 fillRectangle: (myBox insetBy: 7)		color: color.	t2 _ stagePane right + 3 @ (myBox top + topSectionHeight + 12) extent: 1 @ (myBox height - topSectionHeight - 30).	t1 fillRectangle: t2 color: (Color gray: 0.3).	t2 _ t2 origin + (1 @ 0) extent: 1 @ t2 height.	t1 fillRectangle: t2 color: color! !!ScratchPresenterMorph methodsFor: 'initialization'!drawOn: t1 	| t2 |	t2 _ Rectangle center: stage center extent: (doubleSize					ifTrue: [2 * stage extent]					ifFalse: [stage extent]).	(self bounds areasOutside: t2)		do: [:t3 | t1 fillRectangle: t3 color: color].	(t1 clipRect intersects: t2)		ifTrue: 			[offscreenWorld invalidRect: t1 clipRect.			offscreenWorld incrRedrawDouble: doubleSize]! !!ScratchScriptEditorMorph methodsFor: 'drawing'!drawBackgroundOn: t1 	color isTransparent ifTrue: [^ self].	t1 fillRectangle: (self topLeft corner: pageViewerMorph topRight)		color: color! !!ScratchScriptsMorph methodsFor: 'stepping'!step	| t1 t2 t3 t4 t5 t6 t7 |	feedbackMorph ifNil: [feedbackMorph _ BorderedMorph new borderWidth: 3]		ifNotNil: [feedbackMorph delete].	t1 _ Color white.	feedbackMorph useSquareCorners.	t2 _ World activeHand.	t2 toolType = 'CutTool' ifTrue: [^ self showDeleteFeedback].	(self bounds containsPoint: t2 position)		ifFalse: [^ self].	t2 submorphCount = 1 ifFalse: [^ self].	t3 _ t2 firstSubmorph.	(t3 isKindOf: ScratchCommentMorph)		ifTrue: [^ self showCommentDropFeedback].	(t3 isKindOf: BlockMorph)		ifFalse: [^ self].	t3 isReporter		ifTrue: 			[(t4 _ self topArgMorphAt: t3 bounds exclude: nil) ifNil: [^ self].			(t4 isKindOf: ReporterBlockMorph)				ifTrue: [t4 mySelector = #multiItemList: | (t4 mySelector = #concatenate:withList:)						ifFalse: [(t4 acceptsTypeOf: t3)								ifFalse: [^ self]]].			feedbackMorph bounds: (t4 bounds expandBy: 5);			 color: (t1 alpha: 0.4);			 borderColor: t1;			 useRoundedCorners.			^ self addMorphFront: feedbackMorph].	t5 _ t3 closestAttachTargetIn: self.	t5		ifNil: [(t3 bottomBlock isKindOf: CBlockMorph)				ifFalse: 					[t5 _ t3 bottomBlock closestAttachTargetIn: self.					t5						ifNotNil: [(t5 value owner isKindOf: BlockMorph)								ifTrue: [t5 _ nil]]]].	t5 ifNil: [^ self].	t6 _ t5 key.	t7 _ t5 value.	feedbackMorph borderColor: t1;	 color: t1.	ScratchTranslator isRTL		ifTrue: 			[feedbackMorph extent: t6 x - t7 left @ 5.			self addMorphFront: (feedbackMorph position: t6 - (feedbackMorph width @ 0))]		ifFalse: 			[feedbackMorph extent: t7 right - t6 x @ 5.			self addMorphFront: (feedbackMorph position: t6)]! !!ScratchScriptsMorph methodsFor: 'stepping'!topArgMorphAt: t1 exclude: t2 	| t3 t4 |	t3 _ submorphs				detect: [:t5 | t5 ~~ t2						and: [(t5 isKindOf: BlockMorph)								and: [t5 fullBounds intersects: t1]]]				ifNone: [^ nil].	t3		allMorphsDo: 			[:t6 | 			((t6 isKindOf: CommandBlockMorph)				and: [(t6 isKindOf: HatBlockMorph) not])				ifTrue: [1 to: t6 argumentCount do: 						[:t7 | 						t4 _ t6 argumentAt: t7.						(t4 isKindOf: MultiArgMorph)							ifTrue: 								[t4 args do: 									[:t8 | 									((t8 bounds intersects: t1)										and: [t8 acceptsDroppedReporters])										ifTrue: [^ t8].									nil].								(t4 adder bounds intersects: t1)									ifTrue: [^ t4 adder]].						((t4 bounds intersects: t1)							and: [t4 acceptsDroppedReporters])							ifTrue: [^ t4]]].			(t6 isKindOf: WhenHatBlockMorph)				ifTrue: 					[t4 _ t6 argMorph.					((t4 bounds intersects: t1)						and: [t4 acceptsDroppedReporters])						ifTrue: [^ t4].					nil]].	^ nil! !!ScratchTalkBubbleMorph methodsFor: 'accessing'!message: t1 	| t2 t3 t4 |	t2 _ 145.	t4 _ t1.	(t4 isKindOf: OrderedCollection)		ifTrue: [t4 _ t4 correctExploreStyle].	contentsMorph width: t2;	 contents: t4 asUTF8 withBlanksTrimmed;	 fitContents.	self extent: contentsMorph extent + (0 @ 28).	t3 _ contentsMorph width >= t2				ifTrue: [3]				ifFalse: [self width - contentsMorph width // 2 + 3].	contentsMorph position: self position + (t3 @ 5)! !!ScratchToolTipMorph methodsFor: 'accessing'!message: t1 	| t2 |	(t1 isKindOf: ScratchSpriteMorph)		ifTrue: [message _ t1 imageForm].	t1 lines size < 2		ifTrue: [message _ StringMorph contents: t1 asUTF8 font: self messageFont]		ifFalse: [message _ TextMorph new contentsAsIs: (ScriptableScratchMorph new join: (t1 lines copyFrom: 1 to: (t1 lines size within: 1 and: 50))							with: '') asUTF8;					 fontName: 'Verdana' size: 14].	self addMorph: message.	t2 _ t1 lines size.	t2 = 0 ifTrue: [t2 _ 1].	self extent: message extent + (12 @ 3 + (t2 - 1 * 6)).	message position: 6 @ 1! !!ScratchViewerMorph methodsFor: 'initialization'!rebuildCategorySelectors	| t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 |	(t1 _ ScratchFrameMorph customButtons) ifNil: [t1 _ #(#motion #control #looks #sensing #strings #operators #sound #pen #data #objects #files #connect #program #more )].	submorphs do: [:t14 | (t14 isKindOf: ResizableToggleButton2)			ifTrue: [t14 delete]].	t2 _ 75 @ 0.	t3 _ t1				collect: 					[:t15 | 					t4 _ (ScratchTranslator translationFor: t15 asString) capitalized.					t15 = #data ifTrue: [t15 _ #variables].					t5 _ ScratchFrameMorph skinAt: t15.					t6 _ ScratchFrameMorph skinAt: t15 , 'Pressed'.					t7 _ ScratchFrameMorph skinAt: t15 , 'Over'.					ScratchTranslator isRTL						ifTrue: [t8 _ ResizableToggleButton2 new										offForm: (t5 flipBy: #horizontal centerAt: t5 center)										onForm: (t6 flipBy: #horizontal centerAt: t6 center)										overForm: (t7 flipBy: #horizontal centerAt: t7 center)]						ifFalse: [t8 _ ResizableToggleButton2 new										offForm: t5										onForm: t6										overForm: t7].					t8 label: t4 font: (ScratchFrameMorph getFont: #Category);					 setLabelColor: Color white;					 target: self;					 actionSelector: #currentCategory:;					 arguments: (Array with: t15);					 toggleButtonMode: true;					 toggleMode: false.					ScratchTranslator isRTL						ifTrue: [t8 rightJustifyInset: 10]						ifFalse: [t8 leftJustifyInset: 10].					t2 _ t2 max: t8 extent + (3 @ -6).					t8].	t9 _ 15.	t1 size \\ 2 = 0		ifTrue: [catButtonsExtent _ 2 * t2 x + (3 * t9) @ (t1 size // 2 * (t2 y + 6) + 25)]		ifFalse: [catButtonsExtent _ 2 * t2 x + (3 * t9) @ ((t1 size / 2) rounded * (t2 y + 6) + 25)].	t10 _ self left + 12 + t9.	t11 _ t10 + t2 x + t9.	t12 _ t10.	t13 _ self top + 17.	1 to: t3 size do: 		[:t16 | 		t8 _ t3 at: t16.		t8 extent: t2.		self addMorph: (t8 position: t12 @ t13).		t16 even			ifTrue: 				[t12 _ t10.				t13 _ t13 + t8 height + 6]			ifFalse: [t12 _ t11]].	self width: catButtonsExtent x.	pageViewer position: self position + (0 @ catButtonsExtent y).	topSectionHeight _ catButtonsExtent y - 4.	self currentCategory: currentCategory! !!ScriptableScratchMorph methodsFor: 'initialization'!initialize	super initialize.	objName _ self nextInstanceName.	vars _ Dictionary new.	lists _ Dictionary new.	lastDialog _ ''.	lastCustomDialog _ ''.	blocksBin _ ScratchScriptsMorph new.	isClone _ false.	costume _ self defaultImageMedia.	media _ OrderedCollection new.	costumeChangeMSecs _ 0.	visibility _ 100.	volume _ 100.	tempoBPM _ 60.	sceneStates _ Dictionary new! !!ScriptableScratchMorph methodsFor: 'looks ops'!addCostume: t1 	| t2 t3 t4 t5 t6 t7 t8 t9 |	t2 _ 0.	t1 = 'current costume' ifTrue: [t2 _ self costumeFromName: (self costumeNameFromNumber: self costumeIndex)].	t1 = 'pen trails'		ifTrue: 			[t9 _ self ownerThatIsA: ScratchSpriteMorph.			^ t9 addPenTrailsCostume].	t1 = 'grab from stage' ifTrue: [^ self grabFromScreen].	t1 = 'edit current' ifTrue: [^ self editCostume].	t1 = 'camera'		ifTrue: 			[self cameraOpen				ifFalse: 					[t8 _ ScratchCameraHelper.					t3 _ ScratchCameraHelper new.					t3 client: self.					t3 openCamera].			self cameraOpen				ifTrue: 					[t3 _ Form extent: (CameraPlugin frameExtent: 1)								depth: 32.					CameraPlugin getFrameForCamera: 1 into: t3 bits.					t2 _ ImageMedia new form: t3]].	t1 = 'stage' ifTrue: [t2 _ ImageMedia new form: (self ownerThatIsA: ScratchStageMorph) stageShotForm].	t1 = 'paint new' ifTrue: [^ self drawNewCostume].	t1 = 'import'		ifTrue: 			[(self isKindOf: ScratchStageMorph)				ifTrue: 					[t8 _ #background.					t4 _ 'Import Background']				ifFalse: 					[t8 _ #costume.					t4 _ 'Import Costume'].			t5 _ ScratchFileChooserDialog chooseImageFileType: t8 title: t4.			t5 = #cancelled ifTrue: [^ self].			t7 _ OrderedCollection new.			t6 _ FileDirectory extensionFor: t5 asLowercase.			t6 = 'gif'				ifTrue: [[t7 _ (GIFReadWriter new on: (FileStream readOnlyFileNamed: t5)) nextImageSet]						ifError: [^ self]]				ifFalse: [[t7 addLast: (Form fromFileNamed: t5)]						ifError: [^ self]].			t2 _ ImageMedia new form: t7 first].	t2 = 0 ifTrue: [t2 _ ImageMedia new form: (ScratchFrameMorph skinAt: 'defaultSpriteCostume')].	t2 mediaName: (self unusedMediaNameFromBaseName: self defaultImageMedia mediaName).	media addLast: t2.	self lookLike: t2 mediaName.	self inPresentaton ifFalse: [self updateMediaCategory]! !!ScriptableScratchMorph methodsFor: 'looks ops'!costumeLayer	^ owner submorphs indexOf: self! !!ScriptableScratchMorph methodsFor: 'sound ops'!noteOn: t1 duration: t2 elapsed: t3 from: t4 	| t5 t6 t7 t8 t9 t10 |	t5 _ t1.	t10 _ 0.	t5 size		timesRepeat: 			[t10 _ t10 + 1.			((t5 at: t10)				isKindOf: OrderedCollection)				ifTrue: [t5 _ t5 , (t5 at: t10)]].	t8 _ 1 to: t5 size.	t4		ifNil: 			[t9 _ OrderedCollection new.			(t6 _ self ownerThatIsA: ScratchStageMorph) ifNil: [^ ScratchNotePlayer new].			(t7 _ t6 notePlayerFor: self) ifNil: [^ ScratchNotePlayer new].			t8 do: [:t11 | ((t5 at: t11)					isKindOf: OrderedCollection)					ifFalse: 						[t9 add: t7 copy.						t9 last noteOn: (t5 at: t11) asNumberNoError]].			^ t9].	t3 >= (60000 * t2 // self tempo) ifTrue: [t4 do: [:t12 | t12 noteOff]]! !!ScriptableScratchMorph methodsFor: 'operator ops'!concatenate: t1 withList: t2 	^ self concatenate: t1 with: (self join: t2 with: '')! !!ScriptableScratchMorph methodsFor: 'operator ops'!constant: t1 	| t2 |	t1 = 'infinity' ifTrue: [^ self infinity].	t1 = 'pi' ifTrue: [t2 _ Float pi].	t1 = 'e' ifTrue: [t2 _ Float e].	t1 = 'phi' ifTrue: [t2 _ 1.618033988749894].	t1 = 'nil' ifTrue: [^ nil].	t1 = 'Scratch skin' ifTrue: [^ ScratchFrameMorph scratchSkin keys asSortedCollection asOrderedCollection].	t1 = 'fonts' ifTrue: [^ self fonts].	t1 = 'alphabet' ifTrue: [^ #('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' ) asOrderedCollection].	t1 = 'days' ifTrue: [^ #('Sunday' 'Monday' 'Tuesday' 'Wednesday' 'Thursday' 'Friday' 'Saturday' ) asOrderedCollection].	t1 = 'months' ifTrue: [^ #('January' 'Febuary' 'March' 'April' 'May' 'June' 'July' 'August' 'September' 'October' 'November' 'December' ) asOrderedCollection].	t1 = 'days short' ifTrue: [^ #('Sun' 'Mon' 'Tue' 'Wed' 'Thu' 'Fri' 'Sat' ) asOrderedCollection].	t1 = 'months short' ifTrue: [^ #('Jan' 'Feb' 'Mar' 'Apr' 'May' 'June' 'July' 'Aug' 'Sept' 'Nov' 'Dec' ) asOrderedCollection].	t1 = 'image extensions' ifTrue: [^ #('jpg' 'jpeg' 'gif' 'bmp' 'png' ) asOrderedCollection].	t1 = 'sound extensions' ifTrue: [^ #('aif' 'aiff' 'wav' 'mp3' ) asOrderedCollection].	^ t2 asString! !!ScriptableScratchMorph methodsFor: 'operator ops'!constantNames	^ #('pi' 'phi' 'e' 'infinity' 'nil' #- 'alphabet' 'days' 'days short' 'months' 'months short' 'image extensions' 'sound extensions' 'Scratch skin' 'fonts' )! !!ScriptableScratchMorph methodsFor: 'operator ops'!isString: t1 	t1 isNumber ifTrue: [^ false].	(t1 isKindOf: Morph)		ifTrue: [^ false].	(t1 isKindOf: Boolean)		ifTrue: [^ false].	(t1 isKindOf: Color)		ifTrue: [^ false].	t1 isEmpty ifTrue: [^ true].	t1 asMacRoman do: [:t2 | t2 isDigit			ifFalse: [(#($0 $. $- ) includes: t2)					ifFalse: [^ true]]].	^ false! !!ScriptableScratchMorph methodsFor: 'operator ops'!newlineCharacter: t1 	t1 = 'newline (crlf)' ifTrue: [^ String crlf].	t1 = 'carriage return' ifTrue: [^ Character cr asString].	t1 = 'line feed' ifTrue: [^ Character lf asString].	t1 = 'system newline type'		ifTrue: 			[Smalltalk isWindows ifTrue: [^ 'newline (crlf)'].			Smalltalk isMacOSX ifTrue: [^ 'carriage return'].			^ 'line feed'].	^ ''! !!ScriptableScratchMorph methodsFor: 'operator ops'!newlineTypes	^ #('newline (crlf)' #- 'carriage return' 'line feed' #- 'system newline type' )! !!ScriptableScratchMorph methodsFor: 'operator ops'!repeat: t1 times: t2 	| t3 |	t3 _ OrderedCollection new.	(t1 isKindOf: OrderedCollection)		ifFalse: [t3 _ ''].	t2 asNumberNoError		timesRepeat: [(t1 isKindOf: OrderedCollection)				ifTrue: [t3 add: t1]				ifFalse: [t3 _ t3 , t1]].	^ t3! !!ScriptableScratchMorph methodsFor: 'operator ops'!string: t1 findString: t2 starting: t3 	^ t1 asString findString: t2 asString startingAt: t3 asNumberNoError! !!ScriptableScratchMorph methodsFor: 'connect ops'!add: t1 fromFolder: t2 	| t3 |	t3 _ FileDirectory on: t2 asString.	t1 = 'files and folders' ifTrue: [^ t3 fileAndDirectoryNames asOrderedCollection].	t1 = 'files' ifTrue: [^ t3 fileNames asOrderedCollection].	t1 = 'folders' ifTrue: [^ t3 directoryNames asOrderedCollection]! !!ScriptableScratchMorph methodsFor: 'connect ops'!deleteFile: t1 	| t2 t3 t4 t5 |	(self if: t1 contains: FileDirectory slash)		ifFalse: [^ ''].	(self fileExists: t1)		ifFalse: [^ ''].	t4 _ t1 findTokens: FileDirectory slash.	t5 _ t4 size.	t2 _ self askDialog: 'Are you sure you would like to delete the file "' , (t4 at: t5) , '"?("' , t1 , '")'.	t2 = true		ifTrue: 			[t3 _ FileDirectory forFileName: t1.			t3 deleteFileNamed: t1]! !!ScriptableScratchMorph methodsFor: 'connect ops'!displayDepth: t1 	Display newDepth: ((t1 findTokens: ' ')			at: 1) asNumberNoError! !!ScriptableScratchMorph methodsFor: 'connect ops'!exportCostume: t1 toFile: t2 	| t3 t4 t5 |	ScratchFrameMorph runDBlocks		ifFalse: [(DialogBoxMorph ask: 'Do you want to export an image to the file ' , t2 asString , '?')				ifFalse: [^ 0]].	t3 _ nil.	(t1 isKindOf: String)		ifTrue: 			[t3 _ self costumeFromName: t1.			t3				ifNil: 					[t4 _ self interpretStringAsNumberIfPossible: t1.					t4 isNumber						ifTrue: [t3 _ self costumeFromName: (self costumeNameFromNumber: t4)]						ifFalse: [^ self]]].	t3		ifNil: 			[t4 _ t1 asNumberNoError.			t3 _ self costumeFromName: (self costumeNameFromNumber: t4)].	t3 ifNil: [^ self].	t5 _ t2.	(t5 endsWith: '.png')		ifFalse: [t5 _ t5 , '.png'].	t3 form writePNGFileNamed: t5! !!ScriptableScratchMorph methodsFor: 'connect ops'!folderExists: t1 	^ FileDirectory default directoryExists: t1! !!ScriptableScratchMorph methodsFor: 'connect ops'!makeFile: t1 	(FileDirectory default fileExists: t1)		ifTrue: [^ self].	(FileDirectory default directoryExists: t1)		ifTrue: [^ self].	((t1 findTokens: FileDirectory slash) last includes: $.)		ifTrue: [FileDirectory default newFileNamed: t1]		ifFalse: [FileDirectory default createDirectory: t1]! !!ScriptableScratchMorph methodsFor: 'connect ops'!openWebpage: t1 	ScratchFrameMorph runDBlocks		ifFalse: [(DialogBoxMorph ask: 'Do you want to open the URL ' , t1 asString)				ifFalse: [^ 0]].	ScratchPlugin primOpenURL: t1 asString! !!ScriptableScratchMorph methodsFor: 'connect ops'!project: t1 	| t2 t3 t4 |	t2 _ self ownerThatIsA: ScratchFrameMorph.	t2 ifNil: [t2 _ self ownerThatIsA: OffscreenWorldMorph].	t1 = 'project directory'		ifTrue: 			[t3 _ t2 projectDirectory asString.			t3 ifNil: [^ ''].			t4 _ t3 findString: '''' startingAt: 1.			^ self				letter: t4 + 1				to: (self stringLength: t3)						- 1				of: t3].	t1 = 'project location' ifTrue: [^ (self project: 'project directory')			, FileDirectory slash , t2 projectName asString].	t1 = 'processor' ifTrue: [^ Smalltalk getSystemAttribute: 1003].	t1 = 'platform' ifTrue: [^ Smalltalk getSystemAttribute: 1001].	t1 = 'os-category' ifTrue: [^ Smalltalk getSystemAttribute: 1002].	t1 = 'os-release info' ifTrue: [^ Smalltalk getSystemAttribute: 1006].	t1 = 'running Windows?' ifTrue: [^ Smalltalk isWindows].	t1 = 'running Mac?' ifTrue: [^ Smalltalk isMacOSX].	t1 = 'running Unix?' ifTrue: [^ Smalltalk isUnix].	t1 = 'directory slash' ifTrue: [^ FileDirectory slash].	t1 = 'screen height (pixels)' ifTrue: [^ Display height].	t1 = 'screen width (pixels)' ifTrue: [^ Display width].	t1 = 'screen depth' ifTrue: [^ Display depth].	t1 = 'language'		ifTrue: 			[t3 _ ScratchTranslator primLanguage asString.			^ t3 copyFrom: 1 to: t3 size - 1].	t1 = 'country'		ifTrue: 			[t3 _ ScratchTranslator primCountry asString.			^ t3 copyFrom: 1 to: t3 size - 1].	^ ''! !!ScriptableScratchMorph methodsFor: 'connect ops'!projectNames	^ #('project location' 'project directory' 'directory slash' #- 'platform' 'processor' 'os-category' 'os-release info' #- 'running Windows?' 'running Mac?' 'running Unix?' #- 'language' 'country' #- 'screen height (pixels)' 'screen width (pixels)' 'screen depth' )! !!ScriptableScratchMorph methodsFor: 'connect ops'!readFile: t1 	| t2 t3 |	ScratchFrameMorph runDBlocks		ifFalse: [(DialogBoxMorph ask: 'Do you want to read the file ' , t1 asString , '?')				ifFalse: [^ '']].	(FileDirectory default fileExists: t1)		ifFalse: [^ ''].	t2 _ (FileStream readOnlyFileNamed: t1) binary.	t2 ifNil: [^ ''].	t3 _ t2 contentsOfEntireFile asString.	t2 close.	^ t3! !!ScriptableScratchMorph methodsFor: 'connect ops'!synonymsFor: t1 	| t2 |	t2 _ self readFromUrl: 'http://words.bighugelabs.com/api/2/3ab58365f800a9a95c18ed12e3197486/' , t1 , '/'.	^ (self join: (t2 findTokens: String crlf)		with: '|')		findTokens: '|'! !!ScriptableScratchMorph methodsFor: 'connect ops'!write: t1 toFile: t2 	| t3 t4 t5 |	ScratchFrameMorph runDBlocks		ifFalse: [(FileDirectory default fileExists: t2 asString)				ifTrue: [(DialogBoxMorph ask: 'This project wants to overwrite the file ' , t2 asString , '.Do you want it to?')						ifFalse: [^ 0]]].	t4 _ t1 asString.	t5 _ t2 asString.	self clearFile: t5.	(FileDirectory default fileExists: t5)		ifFalse: [^ self].	t3 _ (FileStream fileNamed: t5) binary.	t3 ifNil: [^ self].	t3 setToEnd.	t3 nextPutAll: t4.	t3 close! !!ScriptableScratchMorph methodsFor: 'list ops'!convertToCollection: t1 	| t2 t3 |	t2 _ 0.	t3 _ OrderedCollection new.	(self variableNameInUse: t1)		ifFalse: [^ t3].	(self lineCountOfList: t1)		timesRepeat: 			[t2 _ t2 + 1.			t3 add: (self getLine: t2 ofList: t1)].	^ t3! !!ScriptableScratchMorph methodsFor: 'list ops'!insert: t1 at: t2 ofList: t3 	| t4 t5 |	t4 _ self listNamed: t3 ifNone: [^ 0].	t5 _ self lineNum: t2 forList: t4.	#last = t2 ifTrue: [t5 _ t4 lineCount + 1].	t4 insertLine: (self asListElement: t1)		at: t5! !!ScriptableScratchMorph methodsFor: 'list ops'!lineNum: t1 forList: t2 	| t3 |	t1 isNumber ifTrue: [^ t1 asInteger].	t3 _ t1.	t3 isUnicode ifTrue: [t3 _ String withAll: t1].	(t2 isKindOf: OrderedCollection)		ifTrue: 			[#first = t3 ifTrue: [^ 1].			#last = t3 ifTrue: [^ t2 size].			#any = t3				ifTrue: 					[t2 size = 0 ifTrue: [^ 1].					^ (1 to: t2 size) atRandom].			^ t3].	(t3 isKindOf: String)		ifTrue: 			[#first = t3 ifTrue: [^ 1].			#last = t3 ifTrue: [^ t2 lineCount].			#any = t3				ifTrue: 					[t2 lineCount = 0 ifTrue: [^ 1].					^ (1 to: t2 lineCount) atRandom].			^ t3 asNumberNoError].	^ 0! !!ScriptableScratchMorph methodsFor: 'list ops'!multiItemList: t1 	^ t1 asOrderedCollection! !!ScriptableScratchMorph methodsFor: 'list ops'!setLine: t1 ofList: t2 to: t3 	| t4 |	t4 _ self listNamed: t2 ifNone: [^ ''].	^ t4 setLineAt: (self lineNum: t1 forList: t4)		to: (self asListElement: t3)! !!ScriptableScratchMorph methodsFor: 'list ops'!showOrHideList: t1 show: t2 	| t3 t4 t5 |	(self isKindOf: ScratchStageMorph)		ifTrue: [t4 _ self]		ifFalse: [t4 _ self ownerThatIsA: ScratchStageMorph].	(self listVarNames includes: t1)		ifTrue: [t3 _ lists at: t1]		ifFalse: 			[t4 ifNil: [^ self].			(t4 listVarNames includes: t1)				ifTrue: [t3 _ t4 lists at: t1]				ifFalse: [^ self]].	t2		ifTrue: [t4 addMorph: t3]		ifFalse: [t3 delete].	(t5 _ self ownerThatIsA: ScratchFrameMorph) ifNil: [^ self].	self inPresentaton ifFalse: [t5 viewerPane categoryChanged: 'variables']! !!ScriptableScratchMorph methodsFor: 'other ops'!displayMenu: t1 atX: t2 y: t3 	(t1 isKindOf: MenuMorph)		ifFalse: [^ ''].	t1 defaultTarget: self.	t1 popUpAt: (self scratchPoint: t2 @ t3)			+ (20 @ 40) forHand: World activeHand.	lastDialog _ self.	[lastDialog = self]		whileTrue: [World doOneCycle].	^ lastDialog! !!ScriptableScratchMorph methodsFor: 'other ops'!enterSmallPresentation	| t1 |	t1 _ self ownerThatIsA: ScratchFrameMorph.	t1 ifNotNil: [t1 enterPresentationModeSmall]! !!ScriptableScratchMorph methodsFor: 'other ops'!fonts	^ UnicodePlugin getFontList asOrderedCollection! !!ScriptableScratchMorph methodsFor: 'other ops'!isEventNamedRecieved: t1 	| t2 t3 |	self isSprite ifTrue: [^ (self ownerThatIsA: ScratchStageMorph)			isEventNamedRecieved: t1].	t2 _ self scripts				select: [:t4 | t4 class == EventHatMorph and: [t4 eventName caseInsensitiveEqual: t1]].	t2 _ t2 asOrderedCollection.	self		submorphsDo: [:t5 | (t5 isKindOf: ScriptableScratchMorph)				ifTrue: [(t5 scripts						select: [:t4 | t4 class == EventHatMorph and: [t4 eventName caseInsensitiveEqual: t1]])						do: [:t6 | t2 _ t2 copyWith: t6]]].	t3 _ t2 select: [:t4 | t4 scratchProc notNil].	^ t3 size > 0! !!ScriptableScratchMorph methodsFor: 'other ops'!menuChoice: t1 	lastDialog _ t1! !!ScriptableScratchMorph methodsFor: 'other ops'!object: t1 equals: t2 	^ (self coerceSpriteArg: t1)		= (self coerceSpriteArg: t2)! !!ScriptableScratchMorph methodsFor: 'other ops'!popUpMenu: t1 items: t2 	| t3 |	t3 _ MenuMorph new.	t1 asString size = 0 ifFalse: [t3 title: t1].	t3 defaultTarget: self.	t2 asOrderedCollection do: [:t4 | (t4 isKindOf: MenuMorph)			ifTrue: [t3 add: t4 title subMenu: t4]			ifFalse: [t4 = #-					ifTrue: [t3 addLine]					ifFalse: [t3							add: t4							selector: #menuChoice:							argument: t4]]].	^ t3! !!ScriptableScratchMorph methodsFor: 'other ops'!presentationList	^ #('presentation' 'editor' 'small presentation' #- 'fullscreen' 'exit fullscreen' #- 'always quit while exiting presentation' 'don''t quit while exiting presentation' )! !!ScriptableScratchMorph methodsFor: 'other ops'!projectSpeed: t1 	ScratchProcess blockHighlightMSecs: ((t1 isKindOf: String)			ifTrue: [(t1 findTokens: ' ') first]			ifFalse: [t1]) asNumberNoError! !!ScriptableScratchMorph methodsFor: 'other ops'!setPresentationMode: t1 	t1 = 'presentation' ifTrue: [self enterPresentation].	t1 = 'editor' ifTrue: [self exitPresentation].	t1 = 'small presentation' ifTrue: [self enterSmallPresentation].	t1 = 'enter' ifTrue: [self enterPresentation].	t1 = 'exit' ifTrue: [self exitPresentation].	t1 = 'enter small' ifTrue: [self enterSmallPresentation].	t1 = 'fullscreen' ifTrue: [Smalltalk fullScreenMode: true].	t1 = 'exit fullscreen' ifTrue: [Smalltalk fullScreenMode: false].	(t1 beginsWith: 'always quit while exiting')		ifTrue: [self isInWorld				ifTrue: [(self ownerThatIsA: ScratchFrameMorph) allExitTrue]				ifFalse: [ScratchFrameMorph new allExitTrue]].	(t1 beginsWith: 'don''t quit while exiting')		ifTrue: [self isInWorld				ifTrue: [(self ownerThatIsA: ScratchFrameMorph) allExitFalse]				ifFalse: [ScratchFrameMorph new allExitFalse]]! !!ScriptableScratchMorph methodsFor: 'other ops'!stepSpeedMenu	| t1 |	t1 _ CustomMenu new.	#('0 (Turbo mode)' '1 (Normal)' '30 (Flash blocks fast)' '200 (Flash blocks slow)' ) do: [:t2 | t1 add: t2 action: t2].	t1 localize.	^ t1! !!ScriptableScratchMorph methodsFor: 'variables'!addVariable: t1 asType: t2 	t2 = 'private' ifTrue: [^ self addVariable: t1].	self addGlobalVariable: t1! !!ScriptableScratchMorph methodsFor: 'variables'!dataMenu	| t1 t2 |	t1 _ CustomMenu new title: 'Choose a subcategory:'.	t1 add: 'Variables' action: 5.	t1 add: 'Lists' action: 1.	t1 add: 'Collections' action: 2.	t2 _ t1 localize startUp.	t2 ifNil: [^ self].	t2 = 5 ifTrue: [^ (self ownerThatIsA: ScratchFrameMorph) viewerPane currentCategory: 'variable'].	t2 = 1 ifTrue: [^ (self ownerThatIsA: ScratchFrameMorph) viewerPane currentCategory: 'list'].	(self ownerThatIsA: ScratchFrameMorph) viewerPane currentCategory: 'collections'! !!ScriptableScratchMorph methodsFor: 'variables'!deleteVariable: t1 	| t2 |	(t2 _ self ownerThatIsA: ScratchFrameMorph)		ifNil: 			[t2 _ (self ownerThatIsA: OffscreenWorldMorph) frame.			t2 deleteWatchersForVar: t1 ofSprite: self.			vars removeKey: t1 asString ifAbsent: [^ self]]		ifNotNil: 			[t2 deleteWatchersForVar: t1 ofSprite: self.			vars removeKey: t1 asString ifAbsent: [^ self].			t2 viewerPane categoryChanged: 'variables']! !!ScriptableScratchMorph methodsFor: 'variables'!getVar: t1 	^ vars at: t1 asString		ifAbsent: 			[(self isKindOf: ScratchStageMorph)				ifTrue: [^ 0].			owner getVar: t1 asString]! !!ScriptableScratchMorph methodsFor: 'variables'!listOrVarHaHa	^ #('variable' 'list' )! !!ScriptableScratchMorph methodsFor: 'variables'!setVar: t1 to: t2 	| t3 t4 |	t3 _ t1 asString.	(t3 isKindOf: OrderedCollection)		ifTrue: [t3 _ t1].	(t3 isKindOf: Color)		ifTrue: [t3 _ t1].	(t3 isKindOf: ScriptableScratchMorph)		ifTrue: [t3 _ t1].	(vars includesKey: t3)		ifFalse: 			[t4 _ self ownerThatIsA: ScratchStageMorph.			(t4 notNil and: [t4 ~= self])				ifTrue: [t4 setVar: t1 to: t2].			^ self].	vars at: t3 put: t2! !!ScriptableScratchMorph methodsFor: 'blocks'!addGenericListBlocksTo: t1 y: t2 	| t3 t4 t5 t6 |	t3 _ ScratchFrameMorph buttonLabel: 'Make a list' localized selector: #addList.	(self isKindOf: ScratchStageMorph)		ifTrue: [t3 actionSelector: #addGlobalList].	t4 _ ScratchFrameMorph buttonLabel: 'Delete a list' localized selector: #deleteList.	t5 _ 13.	t6 _ t2 + 10.	t1 addMorph: (t3 target: self;		 position: t5 @ t6).	t6 _ t3 bottom + 3.	t1 addMorph: (t4 target: self;		 position: t5 @ t6).	t6 _ t4 bottom + 10.	t6 _ (self				addListReportersTo: t1				x: t5				y: t6)				+ 10.	(self blocksFor: 'list')		do: [:t7 | t7 = #- | (t7 = #~)				ifTrue: 					[t7 = #- ifTrue: [t6 _ t6 + 15].					t7 = #~ ifTrue: [t6 _ t6 + 5]]				ifFalse: 					[t6 _ self								createBlock: t7								atPosition: t5 @ t6								onPage: t1.					t1 submorphs last color: ScriptableScratchMorph listBlockColor]].	^ t6! !!ScriptableScratchMorph methodsFor: 'blocks'!addGenericVariableBlocksTo: t1 x: t2 y: t3 	| t4 |	t4 _ t3.	(self blocksFor: 'variables')		do: [:t5 | t5 = #- | (t5 = #~)				ifTrue: 					[t5 = #- ifTrue: [t4 _ t4 + 15].					t5 = #~ ifTrue: [t4 _ t4 + 5]]				ifFalse: 					[t4 _ self								createBlock: t5								atPosition: t2 @ t4								onPage: t1.					t1 submorphs last color: (ScriptableScratchMorph blockColorFor: 'variables')]].	^ t4! !!ScriptableScratchMorph methodsFor: 'blocks'!blockFromSpec: t1 color: t2 	| t3 t4 t5 t6 t7 t8 t9 |	t3 _ ScratchTranslator translationFor: (t1 at: 1).	t9 _ CommandBlockMorph argPermutationForSpec: (t1 at: 1)				withTranslation: t3.	t4 _ t1 at: 2.	t5 _ (t1 at: 3) asSymbol.	t6 _ self defaultArgsFor: t1.	(#(#E #K #M #S #W ) includes: t4)		ifTrue: [^ (self hatBlockType: t4)				color: t2].	(t4 includes: $c)		ifTrue: [t5 = #doIfElse				ifTrue: [t7 _ IfElseBlockMorph new isSpecialForm: true]				ifFalse: [t7 _ CBlockMorph new isSpecialForm: true]]		ifFalse: [(t4 includes: $r)				| (t4 includes: $b)				ifTrue: [t7 _ ReporterBlockMorph new]				ifFalse: [t7 _ CommandBlockMorph new]].	(t4 includes: $m)		ifTrue: [t7 _ MakeCodeMorph new].	(t4 includes: $b)		ifTrue: [t7 isBoolean: true].	(t4 includes: $s)		ifTrue: [t7 isSpecialForm: true].	(t4 includes: $t)		ifTrue: [t7 isTimed: true].	(ScriptableScratchMorph isSpriteSpecificTarget: self selector: t5)		ifTrue: [t8 _ self]		ifFalse: [t8 _ self ownerThatIsA: ScratchStageMorph].	^ t7 argPermutation: t9;	 color: t2;	 selector: t5;	 commandSpec: t3;	 defaultArgs: t6;	 receiver: t8! !!ScriptableScratchMorph methodsFor: 'blocks'!blockFromTuple: t1 receiver: t2 	| t3 t4 t5 t6 t7 t8 t9 |	t3 _ t1 first.	(#(#readVariable #changeVariable ) includes: t3)		ifTrue: [^ self variableBlockFromTuple: t1 receiver: t2].	#contentsOfList: = t3 ifTrue: [^ ListContentsBlockMorph new color: ScriptableScratchMorph listBlockColor;		 receiver: t2;		 commandSpec: t1 second;		 selector: #contentsOfList:].	(#(#EventHatMorph #KeyEventHatMorph #MouseClickEventHatMorph #WhenHatBlockMorph ) includes: t3)		ifTrue: 			[t6 _ self hatBlockFromTuple: t1 receiver: t2.			(t6 isKindOf: WhenHatBlockMorph)				ifTrue: [t6 color: Color red].			^ t6].	(#(#runCode:in: #reportCode: #write:toFile: #deleteFile: #openWebpage: #readFile: #exportCostume:toFile: ) includes: t3)		ifTrue: [ScratchFrameMorph projectIsNew ifTrue: [ScratchFrameMorph addToCodeList: t1]].	'MultiArgMorph' = t3 ifTrue: [^ (MultiArgMorph new template: (Smalltalk classNamed: t1 second) new)			install: ((t1 copyFrom: 3 to: t1 size) first					collect: [:t10 | (t10 isKindOf: Array)							ifTrue: [self blockFromTuple: t10 receiver: t2]							ifFalse: [(Smalltalk classNamed: t1 second) new defaultValue: t10]])].	#scratchComment = t3		ifTrue: 			[t6 _ ScratchCommentMorph new.			t1 size > 1 ifTrue: [t6 commentMorph contents: (t1 at: 2)].			t1 size > 2				ifTrue: [(t1 at: 3)						ifFalse: [t6 toggleShowing]].			t1 size > 3 ifTrue: [t6 width: (t1 at: 4)].			t1 size > 4 ifTrue: [t6 anchor: (self blockWithID: (t1 at: 5))].			^ t6].	#comment: = t3		ifTrue: 			[t6 _ CommentBlockMorph new.			t1 size > 1 ifTrue: [t6 comment: (t1 at: 2)].			t1 size > 2				ifTrue: [(t1 at: 3)						ifFalse: [t6 toggleShowing]].			t6 color: (Color					r: 0.8					g: 0					b: 0).			^ t6].	t4 _ BlockSpecDict at: t3 ifAbsent: [].	t4 ifNil: [^ t2 blockFromSpec: #('obsolete or not released yet!!' #- #yourself ) color: Color red].	t5 _ BlockColorDict at: t3 ifAbsent: [Color red].	t6 _ t2 blockFromSpec: t4 color: t5.	(t6 isKindOf: CommandBlockMorph)		ifTrue: 			[t7 _ t6 argumentCount min: t1 size - 1.			1 to: t7 do: 				[:t11 | 				((#(#+ #- #/ #* #= ) includes: t6 selector)					and: [ScratchTranslator isRTLMath])					ifTrue: [t8 _ t1 at: t7 + 1 - (t11 - 1)]					ifFalse: [t8 _ t1 at: t11 + 1].				(t8 isKindOf: Array)					ifTrue: 						[(t8 size = 1 and: [t8 first isKindOf: Array])							ifTrue: [t8 _ t8 first].						t9 _ self blockFromTuple: t8 receiver: t2.						t6 replaceArgMorph: (t6 argumentAt: t11)							by: t9]					ifFalse: [(t6 argumentAt: t11)							defaultValue: t8]].			(t6 isKindOf: CBlockMorph)				ifTrue: [(t1 last isKindOf: Array)						ifTrue: [t6 firstBlockList: (self stackFromTupleList: t1 last receiver: t2)]].			(t6 isKindOf: IfElseBlockMorph)				ifTrue: 					[t8 _ t1 at: t1 size - 1.					(t8 isKindOf: Array)						ifTrue: [t6 trueBlock: (self stackFromTupleList: t8 receiver: t2)].					t8 _ t1 at: t1 size.					(t8 isKindOf: Array)						ifTrue: [t6 falseBlock: (self stackFromTupleList: t8 receiver: t2)]].			(t6 isKindOf: ReporterBlockMorph)				ifTrue: [((t4 at: 2)						includes: $b)						ifTrue: [t6 isBoolean: true]]].	^ t6! !!ScriptableScratchMorph methodsFor: 'blocks'!blocksFor: t1 	| t2 t3 t4 t5 |	t2 _ self class blockColorFor: t1.	t3 _ OrderedCollection new.	t4 _ nil.	(t1 = 'plugins'		ifTrue: [#('plugins' ) , Plugins]		ifFalse: [self class blockSpecs])		do: [:t6 | ((t6 isKindOf: String)				and: [t6 ~= #- and: [t6 ~= #~]])				ifTrue: [t4 _ t6]				ifFalse: [t4 = t1						ifTrue: [t6 = #- | (t6 = #~)								ifTrue: [t3 addLast: t6]								ifFalse: [(t5 _ self blockFromSpec: t6 color: t2) ifNotNil: [t3 addLast: t5]]]]].	^ t3 asArray! !!ScriptableScratchMorph methodsFor: 'blocks'!convertTuplesToStacks	| t1 t2 |	(blocksBin isKindOf: Array)		ifFalse: [^ self].	t1 _ blocksBin.	blocksBin _ ScratchScriptsMorph new.	t1 do: 		[:t3 | 		t2 _ self stackFromTupleList: t3 second receiver: self.		t2 position: t3 first.		blocksBin addMorph: t2]! !!ScriptableScratchMorph methodsFor: 'blocks'!createBlock: t1 atPosition: t2 onPage: t3 	| t4 t5 t6 t7 t8 t9 |	t4 _ t2 x.	t5 _ t2 y.	t6 _ t4.	t1 canBecomeWatcher		ifTrue: 			[t7 _ self createToggleButtonFor: t1.			t8 _ t1 fullBounds height - t7 fullBounds height // 2.			t3 addMorphBack: (t7 position: t4 @ (t5 + t8)).			t6 _ t4 + t7 fullBounds width + 4].	t1 fixBlockLayout; position: t6 @ t5.	t3 addMorphBack: t1.	t1 canBecomeWatcher		ifTrue: 			[t9 _ self ownerThatIsA: ScratchFrameMorph.			t3 updateWatcherButtonsForFrame: t9].	^ t5 + t1 height + 3! !!ScriptableScratchMorph methodsFor: 'blocks'!heading	^ 0! !!ScriptableScratchMorph methodsFor: 'blocks'!variableBlockFromTuple: t1 receiver: t2 	| t3 t4 t5 t6 |	t3 _ t1 at: 2.	t4 _ t2.	(t2 varNames includes: t3)		ifFalse: 			[t5 _ t2 ownerThatIsA: ScratchStageMorph.			t5 ifNil: [t2 addVariable: t3]				ifNotNil: 					[t5 addVariable: t3.					t4 _ t5]].	t1 first = #readVariable ifTrue: [^ VariableBlockMorph new commandSpec: t3;		 receiver: t4].	t6 _ t1 copyFrom: 2 to: t1 size.	t1 first = #changeVariable ifTrue: [^ self blockFromTuple: {#changeVar:by:} , {t6 first} , {t6 last} receiver: t4].	self error: 'unknown variable spec'! !!ScriptableScratchMorph methodsFor: 'blocks'!variablesPage: t1 	| t2 t3 t4 t5 t6 t7 t8 t9 |	t2 _ ScratchBlockPaletteMorph new color: (Color					r: 0.8					g: 0.8					b: 1.0);			 borderWidth: 0.	t7 _ 7.	t1 = true & (ScratchFrameMorph subcategories = true)		ifTrue: 			[t2 addMorph: ((ScratchFrameMorph buttonLabel: 'Blocks for...' selector: #dataMenu) target: self;				 position: 13 @ 7).			t7 _ 30].	t9 _ self varNames size > 0.	(t5 _ self ownerThatIsA: ScratchStageMorph)		ifNotNil: [t5 varNames size > 0 ifTrue: [t9 _ true]].	t3 _ ScratchFrameMorph buttonLabel: 'Make a variable' localized selector: #addGlobalVariable.	(self isKindOf: ScratchSpriteMorph)		ifTrue: [t3 actionSelector: #addVariable].	t4 _ ScratchFrameMorph buttonLabel: 'Delete a variable' localized selector: #deleteVariable.	t6 _ 13.	t2 addMorph: (t3 target: self;		 position: t6 @ t7).	t7 _ t3 bottom + 3.	t9		ifTrue: 			[t2 addMorph: (t4 target: self;				 position: t6 @ t7).			t7 _ t4 bottom + 10].	t7 _ self				addVariableReportersTo: t2				x: t6				y: t7.	t7 _ t7 + 12.	t7 _ self				addGenericVariableBlocksTo: t2				x: t6				y: t7.	t1 = true		ifTrue: 			[t7 _ self addGenericListBlocksTo: t2 y: t7.			#(#- ) , (self blocksFor: 'collections') do: [:t10 | t10 = #- | (t10 = #~)					ifTrue: 						[t10 = #- ifTrue: [t7 _ t7 + 15].						t10 = #~							ifTrue: 								[t2 addMorph: ((StringMorph contents: 'Collections' localized font: (ScratchFrameMorph getFont: #ViewerPage)) color: Color white;									 position: t6 @ t7).								t7 _ t7 + 20]]					ifFalse: [t7 _ self									createBlock: t10									atPosition: 12 @ t7									onPage: t2]]].	t2 updateWatcherButtonsForFrame: (self ownerThatIsA: ScratchFrameMorph).	t8 _ t2 submorphs inject: 0 into: [:t11 :t12 | t11 max: t12 right].	t2 extent: t8 + 10 @ t7.	^ t2! !!ScriptableScratchMorph methodsFor: 'blocks'!viewerPageForCategory: t1 	| t2 t3 t4 |	t1 = 'variables' ifTrue: [^ self variablesPage: true].	t1 = 'variable' ifTrue: [^ self variablesPage: false].	t1 = 'motion' ifTrue: [^ self viewerPageForMotion].	t1 = 'sensing' ifTrue: [^ self viewerPageForSensing].	t1 = 'more' ifTrue: [^ self viewerPageForMore].	t2 _ ScratchBlockPaletteMorph new.	t3 _ 12.	t4 _ 10.	(t1 = 'allMore'		ifTrue: [(self blocksFor: 'dialogs')				, #(#- ) , (self blocksFor: 'gui') , #(#- ) , (self blocksFor: 'colors') , #(#- ) , (self blocksFor: 'plugins')]		ifFalse: [self blocksFor: t1])		do: [:t5 | t5 = #- | (t5 = #~)				ifTrue: 					[t5 = #- ifTrue: [t4 _ t4 + 15].					t5 = #~ ifTrue: [t4 _ t4 + 5]]				ifFalse: [t4 _ self								createBlock: t5								atPosition: t3 @ t4								onPage: t2]].	^ t2! !!ScriptableScratchMorph methodsFor: 'blocks'!viewerPageForMore	| t1 t2 t3 |	t1 _ ScratchBlockPaletteMorph new.	ScratchFrameMorph subcategories		ifTrue: 			[t1 addMorph: ((ScratchFrameMorph buttonLabel: 'Dialog Blocks' selector: #theDialogBlocks) target: self;				 position: 12 @ 10).			t1 addMorph: ((ScratchFrameMorph buttonLabel: 'Create Custom Dialog' selector: #newCustomDialog) target: self;				 position: 12 @ 30).			t1 addMorph: ((ScratchFrameMorph buttonLabel: 'Color Blocks' selector: #colorBlocks) target: self;				 position: 12 @ 80).			t2 _ 12.			t3 _ 110.			Plugins size > 0				ifTrue: 					[t1 addMorph: ((StringMorph contents: 'Plugins:' localized font: (ScratchFrameMorph getFont: #ViewerPage)) color: Color white;						 position: t2 @ t3).					t3 _ 190.					(self blocksFor: 'plugins')						do: [:t4 | t4 = #-								ifTrue: [t3 _ t3 + 15]								ifFalse: [t3 _ self												createBlock: t4												atPosition: t2 @ t3												onPage: t1]]]]		ifFalse: [^ self viewerPageForCategory: 'allMore'].	^ t1! !!ScriptableScratchMorph methodsFor: 'blocks'!viewerPageForPlugins	| t1 t2 t3 |	t1 _ ScratchBlockPaletteMorph new.	t2 _ 12.	t3 _ 10.	Plugins do: [:t4 | t4 = #-			ifTrue: [t3 _ t3 + 15]			ifFalse: [t3 _ self							createBlock: t4							atPosition: t2 @ t3							onPage: t1]].	^ t1! !!ScriptableScratchMorph methodsFor: 'media'!recordSound	World submorphs do: [:t1 | (t1 isKindOf: ScratchSoundRecorderDialogMorph)			ifTrue: [t1 delete]].	ScratchSoundRecorderDialogMorph forClient: self! !!ScriptableScratchMorph methodsFor: 'private'!scratchPoint: t1 	| t2 t3 t4 |	(t1 isKindOf: Number)		ifTrue: 			[t2 _ t1.			t3 _ t1]		ifFalse: [(t1 isKindOf: Array)				ifTrue: 					[t2 _ t1 first.					t3 _ t1 last]				ifFalse: [(t1 isKindOf: Point)						ifTrue: 							[t2 _ t1 x.							t3 _ t1 y]						ifFalse: [^ self]]].	t2 isNaN ifTrue: [t2 _ 0].	t2 isInf ifTrue: [t2 _ t2 sign * 10000].	t3 isNaN ifTrue: [t3 _ 0].	t3 isInf ifTrue: [t3 _ t3 sign * 10000].	t4 _ t2 @ t3 negated.	^ ScratchOrigin + t4! !!ScriptableScratchMorph methodsFor: 'more ops'!addData: t1 named: t2 type: t3 	t1 = 'variable' ifTrue: [^ self addVariable: t2 asType: t3].	^ self addListType: t2 name: t3! !!ScriptableScratchMorph methodsFor: 'more ops'!collectMyGarbage	Smalltalk garbageCollectMost! !!ScriptableScratchMorph methodsFor: 'more ops'!colorBlocks	(self ownerThatIsA: ScratchFrameMorph) viewerPane currentCategory: 'colors'! !!ScriptableScratchMorph methodsFor: 'more ops'!deleteData: t1 named: t2 	t1 = 'variable' ifTrue: [^ self deleteVariable: t2].	^ self deleteList: t2! !!ScriptableScratchMorph methodsFor: 'more ops'!dialogTitle: t1 image: t2 text: t3 	| t4 |	t4 _ self costumeFromName: t1.	t4 ifNil: [t4 _ self costumeFromName: (self costumeNameFromNumber: t1)].	^ DialogBoxMorph		form: t4		title: t2		text: t3! !!ScriptableScratchMorph methodsFor: 'more ops'!imageDialogTitle: t1 text: t2 	DialogBoxMorph		form: self imageForm		title: t1 asString		text: t2 asString! !!ScriptableScratchMorph methodsFor: 'more ops'!multiline: t1 	^ t1 copyReplaceAll: '' with: String crlf! !!ScriptableScratchMorph methodsFor: 'more ops'!newCustomDialog	(self ownerThatIsA: ScratchFrameMorph) viewerPane currentCategory: 'gui'! !!ScriptableScratchMorph methodsFor: 'more ops'!pathNames	^ #('user' 'documents' 'desktop' #- 'music' 'pictures' 'applications' #- 'Explore folder' 'Explore image' )! !!ScriptableScratchMorph methodsFor: 'more ops'!reportCode: t1 	ScratchFrameMorph runDBlocks		ifFalse: [(DialogBoxMorph ask: 'This project wants to run a code written in Squeak.Do you want it to?')				ifFalse: [^ nil]].	^ Compiler		evaluate: t1		for: self		logged: false! !!ScriptableScratchMorph methodsFor: 'more ops'!runCode: t1 in: t2 	| t3 t4 t5 t6 |	ScratchFrameMorph runDBlocks		ifFalse: [(DialogBoxMorph ask: 'This project wants to run a code in ' , t2 asString , '.Would you like it to?')				ifFalse: [^ 0]].	t3 _ ''.	t6 _ self asciiMultiLetters: (self asciiForMulti: t2).	t5 _ FileDirectory slash.	t6 = 'Squeak' ifTrue: [^ self doCode: t1].	t6 = 'Applescript' ifTrue: [t3 _ 'applescript'].	Smalltalk isWindows		ifTrue: 			[t6 = 'VBScript' ifTrue: [t3 _ 'vbs'].			t6 = 'Batch script' ifTrue: [t3 _ 'bat'].			t6 = 'Command prompt' ifTrue: [t3 _ 'cmd'].			t6 = 'Windows PowerShell' ifTrue: [t3 _ 'ps1'].			t6 = 'Python' ifTrue: [t3 _ 'py']].	t6 = 'HTML (viewer)' ifTrue: [t3 _ 'html'].	t3 = '' ifTrue: [^ 0].	t4 _ FileDirectory default pathName , t5 , 'locale'.	t4 _ t4 , t5 , (self add: 'files' fromFolder: t4) size asString , 'temp.' , t3.	ScratchFrameMorph new write: t1 asString toFile: t4.	ScratchPlugin primOpenURL: t4 asString! !!ScriptableScratchMorph methodsFor: 'more ops'!screenDepths	^ #('32 (normal)' '16 (ok)' '8 (low)' '4 (grayscale)' )! !!ScriptableScratchMorph methodsFor: 'more ops'!theDialogBlocks	(self ownerThatIsA: ScratchFrameMorph) viewerPane currentCategory: 'dialogs'! !!ScriptableScratchMorph methodsFor: 'more ops'!useTypes	^ #('Explore' 'a compiled project' 'malware protection for this project' )! !!ScriptableScratchMorph methodsFor: 'more ops'!userPath: t1 	t1 = 'user' ifTrue: [^ ScratchPlugin primGetFolderPath: 1].	t1 = 'desktop' ifTrue: [^ ScratchPlugin primGetFolderPath: 2].	t1 = 'documents' ifTrue: [^ ScratchPlugin primGetFolderPath: 3].	t1 = 'pictures' ifTrue: [^ ScratchPlugin primGetFolderPath: 4].	t1 = 'music' ifTrue: [^ ScratchPlugin primGetFolderPath: 5].	t1 = 'volumes' ifTrue: [^ Smalltalk isMacOSX			ifTrue: ['/Volumes']			ifFalse: ['']].	t1 = 'applications' ifTrue: [^ Smalltalk isMacOSX			ifTrue: ['/Applications']			ifFalse: ['C:\']].	t1 = 'Explore image' ifTrue: [^ Smalltalk imageName].	^ FileDirectory default pathName! !!ScriptableScratchMorph methodsFor: 'more ops'!usingAnEXE	^ ScratchFrameMorph isEXE! !!ScriptableScratchMorph methodsFor: 'more ops'!usingType: t1 	t1 = 'a compiled project' ifTrue: [^ ScratchFrameMorph isEXE].	t1 = 'Explore' ifTrue: [^ true].	t1 = 'malware protection for this project' ifTrue: [^ ScratchFrameMorph runDBlocks not].	^ false! !!ScriptableScratchMorph methodsFor: 'more ops'!viewAllPlugins	(self ownerThatIsA: ScratchFrameMorph) viewerPane currentCategory: 'plugins'! !!ScriptableScratchMorph methodsFor: 'cloud list ops'!join: t1 with: t2 	| t3 t4 t5 t6 |	t1 size = 0 ifTrue: [^ ''].	t6 _ t1 size.	t3 _ 1.	t4 _ t1 at: 1.	t6 - 1		timesRepeat: 			[t3 _ t3 + 1.			t5 _ t1 at: t3.			(t5 isKindOf: OrderedCollection)				ifTrue: [t5 _ self join: t5 with: ''].			t4 _ t4 asString , t2 asString , t5 asString].	^ t4! !!ScriptableScratchMorph methodsFor: 'collection handling'!add: t1 toOCollection: t2 	| t3 |	t3 _ t2 asOrderedCollection.	t3 add: t1.	^ t3! !!ScriptableScratchMorph methodsFor: 'collection handling'!delete: t1 ofOCollection: t2 	| t3 t4 |	t3 _ t2 asOrderedCollection.	t4 _ t1 asNumberNoError.	t3 removeAt: t4.	^ t3! !!ScriptableScratchMorph methodsFor: 'collection handling'!insert: t1 at: t2 ofOCollection: t3 	| t4 t5 |	t4 _ t3 asOrderedCollection.	t5 _ t2 asNumberNoError.	t4 insert: t1 before: t5.	^ t4! !!ScriptableScratchMorph methodsFor: 'collection handling'!replace: t1 ofOCollection: t2 with: t3 	| t4 t5 |	t4 _ t2 asOrderedCollection.	t5 _ t1 asNumberNoError.	t4 at: t5 put: t3.	^ t4! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!addCustomCheckboxesType: t1 options: t2 	| t3 |	t3 _ 't1 createCheckBoxesFor: #('.	t2 reverseDo: [:t4 | t3 _ t3 , '''   ' , t4 asString , ''' '].	^ t3 , ') font: t3 multipleSelection: ' , (t1 = 'checkboxes'			ifTrue: ['true']			ifFalse: ['false']) , '.'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!checkboxType	^ #('checkboxes' 'radio buttons' )! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!customDialogButtons: t1 opt2: t2 opt3: t3 	^ '	t1 dialogButtons: ''' , (t1 asString copyReplaceAll: '''' with: '''''') , ''' opt2: ''' , (t2 asString copyReplaceAll: '''' with: '''''') , ''' opt3: ''' , (t3 asString copyReplaceAll: '''' with: '''''') , '''.'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!customDialogText: t1 	^ 't1 message: ''' , (t1 asString copyReplaceAll: '''' with: '''''') , ''' font: ' , '(t3 = 0 ifTrue: [(ScratchFrameMorph getFont: #DialogBoxMessage)] ifFalse: [(ScratchFrameMorph getFont: t3)]).'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!customFont: t1 	^ 't3 _ #' , t1 , '.'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!customFont: t1 for: t2 	^ 't4 _ t3.	t3 _ #' , t1 , '.' , '' , t2 , 't3 _ t4.'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!customPosition	^ #('left' 'center' 'right' )! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!customPosition: t1 for: t2 	^ 't5 _ t1 poso.t1 poso: ''' , t2 , '''.' , t1 , 't1 poso: t5.'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!customScrollString: t1 x: t2 y: t3 editable: t4 	^ '	t1 addScrollString: ''' , (t1 asString copyReplaceAll: '''' with: '''''') , ''' extent: ' , t2 asString , '@' , t3 asString , ' editable: ' , t4 asString , ' font: t3.'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!customTitle: t1 	^ '	t1 title: ''' , (t1 asString copyReplaceAll: '''' with: '''''') , '''.'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!displayCustomDialogMorphs: t1 	| t2 t3 |	t3 _ OrderedCollection new.	t1		reverseDo: [:t4 | (t4 beginsWith: 't3')				ifTrue: [t3 addFirst: t4]				ifFalse: [t3 add: t4]].	t2 _ self join: t3 with: ''.	^ self reportCode: '| t1 t5 t4 |	t1 _ CustomDialog new.	t3 _ 0.	' , t2 , '	lastCustomDialog _ t1 getUserResponseSpecial.	^ lastCustomDialog'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!displayCustomDialogMorphsA: t1 	| t2 |	t2 _ t1.	(t1 isKindOf: OrderedCollection)		ifFalse: 			[t2 _ OrderedCollection new.			t2 add: t1].	self displayCustomDialogMorphs: t2! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!lastCustomDialog	^ lastCustomDialog! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!passOrNorm	^ #('string' 'password' )! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!password: t1 customStringField: t2 	^ 't1 stringField: ''' , (t2 asString copyReplaceAll: '''' with: '''''') , ''' font: t3 passwordMode: ' , (t1 = 'string'			ifTrue: ['false']			ifFalse: ['true']) , '.'! !!ScriptableScratchMorph methodsFor: 'custom dialogs'!programFonts	^ ScratchFrameMorph fonts! !!ScratchSpriteMorph methodsFor: 'pen ops'!stamp: t1 x: t2 y: t3 font: t4 size: t5 color: t6 	| t7 t8 t9 |	(t6 isKindOf: Color)		ifFalse: [^ 0].	(t7 _ self ownerThatIsA: ScratchStageMorph) ifNil: [^ self].	t7 createOrResizeTrailsForm.	t8 _ t7 penTrailsForm.	t9 _ FormCanvas on: t8.	t9		text: t1 asString		at: t2 + 240 @ (t3 negated + 180)		font: (StrikeFont fontName: t4 size: t5)		color: t6.	t7 changed! !!ScratchSpriteMorph methodsFor: 'private'!correctExploreStyle	^ self objName asString! !!ScratchSpriteMorph methodsFor: 'private'!runSkinExport	| t1 |	t1 _ ScratchFrameMorph scratchSkin.	Cursor read showWhile: [t1 do: [:t2 | self addCostumeType: 'skin at' From: t2]]! !!ScratchSpriteMorph methodsFor: 'private'!scratchPoint: t1 	| t2 t3 t4 |	(t1 isKindOf: Number)		ifTrue: 			[t2 _ t1.			t3 _ t1]		ifFalse: [(t1 isKindOf: Array)				ifTrue: 					[t2 _ t1 first.					t3 _ t1 last]				ifFalse: [(t1 isKindOf: Point)						ifTrue: 							[t2 _ t1 x.							t3 _ t1 y]						ifFalse: [^ self]]].	t2 isNaN ifTrue: [t2 _ 0].	t2 isInf ifTrue: [t2 _ t2 sign * 10000].	t3 isNaN ifTrue: [t3 _ 0].	t3 isInf ifTrue: [t3 _ t3 sign * 10000].	t4 _ t2 @ t3 negated.	^ ScratchOrigin + (t4 - offsetWhenRotated)! !!ScratchStageMorph methodsFor: 'event handling'!isEventNamedRecieved: t1 	| t2 t3 |	self isSprite ifTrue: [^ (self ownerThatIsA: ScratchStageMorph)			isEventNamedRecieved: t1].	t2 _ self scripts				select: [:t4 | t4 class == EventHatMorph and: [t4 eventName caseInsensitiveEqual: t1]].	t2 _ t2 asOrderedCollection.	self		submorphsDo: [:t5 | (t5 isKindOf: ScriptableScratchMorph)				ifTrue: [(t5 scripts						select: [:t4 | t4 class == EventHatMorph and: [t4 eventName caseInsensitiveEqual: t1]])						do: [:t6 | t2 _ t2 copyWith: t6]]].	t3 _ t2 select: [:t4 | t4 scratchProc notNil].	^ t3 size > 0! !!ScratchStageMorph methodsFor: 'clones'!correctExploreStyle	^ 'Stage'! !!ScriptableScratchMorph class methodsFor: 'class initialization'!initialize	Experimental _ false.	ScratchOrigin _ 0 @ 0.	RandomGen _ Random new.	Plugins _ Array new.	TimerStartMSecs _ Time millisecondClockValue.	ListBlockColor _ Color				h: 18				s: 0.92				v: 0.85! !!ScriptableScratchMorph class methodsFor: 'block specs'!blockColorFor: t1 	'control' = t1 ifTrue: [^ Color			h: 42			s: 0.85			v: 0.9].	'files' = t1 ifTrue: [^ (Color			r: 0.679			g: 0.425			b: 0.239) darker darker darker].	'strings' = t1 ifTrue: [^ Color yellow darker darker darker].	'motion' = t1 ifTrue: [^ Color			h: 225			s: 0.65			v: 0.83].	'motor' = t1 ifTrue: [^ Color			h: 220			s: 0.85			v: 0.725].	'looks' = t1 ifTrue: [^ Color			h: 264			s: 0.62			v: 0.89].	'pen' = t1 ifTrue: [^ Color			h: 165			s: 1			v: 0.63].	'operators' = t1 ifTrue: [^ Color			h: 93			s: 0.9			v: 0.76].	'sound' = t1 ifTrue: [^ Color			h: 296			s: 0.66			v: 0.85].	'sensing' = t1 ifTrue: [^ Color			h: 200			s: 0.98			v: 0.86].	'variables' = t1 ifTrue: [^ Color			h: 25			s: 0.88			v: 0.95].	'variable' = t1 ifTrue: [^ Color			h: 25			s: 0.88			v: 0.95].	'list' = t1 ifTrue: [^ ListBlockColor].	'collections' = t1 ifTrue: [^ Color			h: 18			s: 0.92			v: 0.7].	'connect' = t1 ifTrue: [^ Color			h: 160			s: 0.7			v: 0.75].	'objects' = t1 ifTrue: [^ Color			h: 33			s: 76			v: 78].	'program' = t1 ifTrue: [^ Color			h: 224.9			s: 1			v: 0.9].	'more' = t1 ifTrue: [^ Color			r: 0			g: 0			b: 0].	'gui' = t1 ifTrue: [^ Color			h: 220			s: 0.85			v: 0.45].	^ Color		r: 0		g: 0		b: 0! !!ScriptableScratchMorph class methodsFor: 'block specs'!blockSpecs	| t1 |	t1 _ #('control' ('when $Sprites$ clicked' #S #-) ('when $Keys$ key pressed' #K #-) ('when $Sprites$ clicked' #M #-) #- ('wait $Number$ secs' #t #wait:elapsed:from: 1) #- ('forever' #c #doForever) ('repeat $Number$' #c #doRepeat 10) #- ('broadcast $EventTitle$' #- #broadcast:) ('broadcast $EventTitle$ and wait' #s #doBroadcastAndWait) ('when I receive $EventTitle$' #E #-) ('is $EventTitle$ being received?' #b #isEventNamedRecieved:) #- ('if $Boolean$' #c #doIf) ('if $Boolean$' #c #doIfElse) #- ('wait until $Boolean$' #s #doWaitUntil) ('repeat until $Boolean$' #c #doUntil) ('while $Boolean$' #c #doWhile) #- ('launch' #c #launch) #- ('stop script' #s #doReturn) ('stop all' #- #stopAll) ('stop all and press green flag' #- #restartProject) ('stop scripts of $Sprites$' #- #stopScriptsOf:) ('stop broadcast $EventTitle$' #- #stopBroadcast:) #- ('ignore result of $String$' #- #ignore:) #- ('forever if $Boolean$' #c #doForeverIf) 'operators' ('$Number$ $Operators$ $Number$' #r #factor:use:factor: '-' #+ '-') #- ('pick random $Number$ to $Number$' #r #randomFrom:to: 1 10) #- ('$String$ < $String$' #b #< '' '') ('$String$ = $String$' #b #= '' '') ('$String$ > $String$' #b #> '' '') #- ('$Boolean$ and $Boolean$' #b #&) ('$Boolean$ or $Boolean$' #b #|) ('not $Boolean$' #b #not) #- ('true' #b #true) ('false' #b #false) ('if $Boolean$ then $String$ else $String$' #r #if:then:else:) #- ('round $Number$' #r #rounded #-) ('round $Number$ to $Number$ places' #r #round:to: #- #-) #- ('$MathFunctions$ of $Number$' #r #computeFunction:of: 'sqrt' 10) #- ('constant $Constants$' #r #constant:) #- ('convert $Conversion$ $String$ to $Conversion$' #r #type:value:as: 'string' '1' 'number') ('$String$ is $BoolConversions$' #b #isThis:a:) ('case sensitive $String$ = $String$' #b #case:sensitive:) #- ('$Number$ within $Number$ and $Number$' #r #number:within:and: 11 1 10) ('numbers $Number$ to: $Number$' #r #numbers:to: 1 10) #- ('ascii for $String$' #r #asciiForThis: #A) ('ascii $String$ as string' #r #asciiLetter: '65') 'sound' ('play sound $Sound$' #- #playSound:) ('play sound $Sound$ until done' #s #doPlaySoundAndWait) ('play sec $Number$ to $Number$ of $Sound$' #- #playFrom:to:ofSound: 1 10 'meow') #- ('stop all sounds' #- #stopAllSounds) ('stop sound $Sound$' #- #pauseSound: 'meow') #- ('import sound from $String$' #- #importMedia:) ('record sound' #- #recordSound) #- ('play drum $DrumMid$ for $Number$ beats' #t #drum:duration:elapsed:from: 48 0.2) ('rest for $Number$ beats' #t #rest:elapsed:from: 0.2) #- ('play note $Multi:Notes$ for $Number$ beats' #t #noteOn:duration:elapsed:from: 60 0.5) ('set instrument to $MidiNames$' #- #midiInstrument: 1) #- ('change volume by $Number$' #- #changeVolumeBy: -10) ('set volume to $Number$%' #- #setVolumeTo: 100) ('volume' #r #volume) #- ('change tempo by $Number$' #- #changeTempoBy: 20) ('set tempo to $Number$ bpm' #- #setTempoTo: 60) ('tempo' #r #tempo) #- ('length of sound $Sound$' #r #lengthOfSound:) ('my sounds' #r #sounds) #- ('error beep' #- #errorBeep) 'motor' ('motor on for $Number$ secs' #t #motorOnFor:elapsed:from: 1) ('motor on' #- #allMotorsOn) ('motor off' #- #allMotorsOff) ('motor power $Number$' #- #startMotorPower: 100) ('motor direction $MotorDirs$' #- #setMotorDirection: 'this way') 'variables' ('set $Vars$ to $String$' #- #setVar:to: '' '0') ('change $Vars$ by $Number$' #- #changeVar:by: '' 1) ('show variable $Vars$' #- #showVariable:) ('hide variable $Vars$' #- #hideVariable:) ('move $Vars$ to x $Number$ y $Number$' #- #moveVar:toX:y:) ('set $Vars$ color to $ColorPalette$' #- #setColorOfVar:to:) ('set $Vars$ style to $VarStyles$' #- #setVarStyle:to:) ('add $ListOrVar$ named $String$ type $ListTypes$' #- #addData:named:type: 'variable' 'var' 'private') ('delete $ListOrVar$ named $String$' #- #deleteData:named: 'variable' 'var') ('variable $String$' #r #getVar:) 'variable' ('set $Vars$ to $String$' #- #setVar:to: '' '0') ('change $Vars$ by $Number$' #- #changeVar:by: '' 1) ('show variable $Vars$' #- #showVariable:) ('hide variable $Vars$' #- #hideVariable:) ('move $Vars$ to x $Number$ y $Number$' #- #moveVar:toX:y:) ('set $Vars$ color to $ColorPalette$' #- #setColorOfVar:to:) ('set $Vars$ style to $VarStyles$' #- #setVarStyle:to:) ('add $ListOrVar$ named $String$ type $ListTypes$' #- #addData:named:type: 'variable' 'var' 'private') ('delete $ListOrVar$ named $String$' #- #deleteData:named: 'variable' 'var') ('variable $String$' #r #getVar:) 'list' ('collection $Multi:String$' #r #multiItemList:) #- ('add $String$ to $Lists$' #- #append:toList: 'thing' 'list') ('delete $ListDeleteIndex$ of $Lists$' #- #deleteLine:ofList: 1 'list') ('insert $String$ at $ListMenu$ of $Lists$' #- #insert:at:ofList: 'thing' 1 'list') ('replace item $ListMenu$ of $Lists$ with $String$' #- #setLine:ofList:to: 1 'list' 'thing') #- ('item $ListMenu$ of $Lists$' #r #getLine:ofList: 1 'list') ('items $Number$ to $Number$ of $Lists$' #r #collectionItems:to:of: 1 3 'list') ('length of $Lists$' #r #lineCountOfList: 'list') ('$Lists$ contains $String$' #b #list:contains: 'list' 'thing') #- ('show list $Lists$' #- #showList: 'list') ('hide list $Lists$' #- #hideList: 'list') ('set list blocks color to $ColorPalette$' #- #setListBlockColorSelf:) #- ('split $String$ at $String$' #r #split:at: '1,2,3' ',') ('join $Lists$ with $String$' #r #joinList:with: 'list' ',') #- ('sort $String$ alphabetically/numerically' #r #sortAlphabetically: 'collection') ('$ListMath$ of $Lists$' #r #Math:List: 'mean' 'list') #- ('$Lists$ replace all $String$ with $String$' #r #replaceItemsOf:from:to: 'list' 'this' 'that') ('place $Number$ that $String$ is in $Lists$' #r #place:that:isInList: 1 'this' 'list') ('times $String$ is in $Lists$' #r #timesThat:isIn: 'this' 'list') 'collections' #~ ('collection $Multi:String$' #r #multiItemList:) #- ('send collection $String$ to $Lists$' #- #sendCollection:toList: '' 'list') ('$Lists$ as collection' #r #convertToCollection: 'list') #- ('add $String$ to $String$' #r #add:toOCollection: 'data' 'collection') ('delete $Number$ of $String$' #r #delete:ofOCollection: 1 'collection') ('insert $String$ at $Number$ of $String$' #r #insert:at:ofOCollection: 'data' 1 'collection') ('replace $Number$ of $String$ with $String$' #r #replace:ofOCollection:with: 1 'collection' 'other data') 'files' ('read file $String$' #r #readFile:) #- ('file $String$ exists?' #b #fileExists:) ('size of file $String$ (KB)' #r #sizeOfFile:) ('extension of file $String$' #r #fileType:) ('directory for $String$' #r #directoryFor:) ('local name for $String$' #r #localNameFor:) ('folder $String$ exists?' #b #folderExists:) ('$FileOrFolder$ in folder $String$' #r #add:fromFolder: 'files') #- ('write $String$ to file $String$' #- #write:toFile:) ('export $Costumes$ to file $String$' #- #exportCostume:toFile:) ('make file/folder at $String$' #- #makeFile:) ('delete file $String$' #- #deleteFile:) #- ('dialog ask for file, initial directory $String$ title $String$ extention(s) $String$' #r #chooseFileDirectory:title:extensions: '' '' 'txt docx') ('pick file path, title $String$, initial directory $String$' #r #pickFileTitle:initialDirectory:) ('pick folder path, title $String$, initial directory $String$' #r #pickFolderTitle:initialDirectory:) ('file path $FilePaths$' #r #userPath:) 'connect' ('read url $String$' #r #readFromUrl: 'http://') ('internet connection' #b #internetConnected) ('http post to document $String$ args $String$ accept $String$ request $String$' #r #httpPostDocument:args:accept:request: 'www.domain.com/' 'collection' 'application/octet-stream' '') #- ('open URL or file $String$' #- #openWebpage: 'http://google.com') ('search $SearchEngines$ for $String$' #r #doThis:on:) #- ('info for zipcode $String$' #r #infoForZipcode: '02139') ('weather in days $WeatherNumbers$ in zipcode $String$' #r #weatherInDays:in: '1' '02139') ('add costume from Google map location:$String$ zoom:$Number$ width:$Number$ height:$Number$ type:$GMaps$' #- #addGoogleMapFromLocation:zoom:x:y:type: 'Cambridge, Massachusetts' 18 640 640 'roadmap') ('add costume from street-view map location:$String$ width:$Number$ height:$Number$ compass dir:$Number$ zoom:$Number$ vertical angle:$Number$' #- #addStreetViewFromLocation:x:y:compass:horizontal:vertical: 'Cambridge, Massachusetts' 640 640 360 90 0) #- ('set cloud var $String$ to $String$' #- #setCloudVar:to:) ('get cloud var $String$' #r #getCloudVar:) #- ('make cloud list $String$' #- #makeCloudList: '') ('cloud list $String$' #r #cloudList: '') #- ('add $String$ to c-list $String$' #- #add:toCloudList: 'thing' '') ('delete $Number$ of c-list $String$' #- #delete:inCloudList: 1 '') ('delete all of c-list $String$' #- #deleteAllCloudList: '') ('insert $String$ at $Number$ of c-list $String$' #- #insert:at:inCloudList: 'thing' 1 '') ('replace $Number$ of c-list $String$ with $String$' #- #replace:ofCloudList:With: 1 '' 'thing') #- ('item $Number$ of c-list $String$' #r #item:ofCloudList: 1 '') ('items $Number$ to $Number$ of c-list $String$' #r #items:to:ofCloudList: 1 3 '') ('length of c-list $String$' #r #cloudListLength: '') #- ('transfer c-list $String$ to list $Lists$' #- #transferCloudList:toList: '' 'list') ('transfer list $Lists$ to c-list $String$' #- #transferList:toCloudList: 'list' '') 'program' ('$Presentation$ mode' #- #setPresentationMode:) ('presentation mode?' #b #inPresentaton) ('using $UseTypes$?' #b #usingType:) ('set stepping speed to $StepSpeed$' #- #projectSpeed: 0) #- ('save project' #- #saveProject) ('save project to $String$' #- #saveProjectTo: 'C:\project.ep') ('import sprite or project from $String$' #- #importProject: 'C:\project.ep') ('open project at $String$' #- #openProject: 'C:\project.ep') ('system $ProjectData$' #r #project:) #- ('collect garbage (save memory)' #- #collectMyGarbage) ('remaining memory' #r #memoryLeft) ('quit Explore' #- #exitEx) #- ('set cursor to $MouseTypes$' #- #cursor:) #- ('copy $String$ to clipboard' #- #setClipboard: 'copy/paste') ('clipboard' #r #clipboardString) #- ('run code $Multiline$ in $CodeTypes$' #- #runCode:in: 'self beep' 'Squeak') ('Squeak code $Multiline$' #r #reportCode: '^ 2 - (3 + 6)') #- #- ('host mesh' #- #hostMesh) ('join mesh at $String$' #- #joinMeshAt: 'ip') ('leave mesh' #- #leaveMesh) ('IP address' #r #getIp) 'strings' ('join $String$ $String$' #r #concatenate:with: 'hello ' 'world') ('join $String$ $Multi:String$' #r #concatenate:withList:) ('letter $Number$ of $String$' #r #letter:of: 1 'world') ('letters $Number$ to $Number$ of $String$' #r #letter:to:of: 1 5 'hello world') ('length of $String$' #r #stringLength: 'world') #- ('$String$ $StringAnalyze$ $String$' #b #if:action:this: 'raincoat' 'contains' 'coat') ('$MixingNames$ $String$' #r #do:to: #reverse #hello) #- ('$NewlineTypes$' #r #newlineCharacter:) ('line $Number$ of $Multiline$' #r #line:ofMultistring: 1 'multiline') ('lines in $Multiline$' #r #multistringLines: 'multiline') ('  $Multiline$  ' #r #multiline: 'multiline') #- ('place $Number$ that $String$ is in $String$' #r #time:this:isIn: 1 'a' 'apple') ('times $String$ is in $String$' #r #times:isIn: 'a' 'raincoat') ('$String$ find $String$ starting at letter $Number$' #r #string:findString:starting: 'hello world' 'l' 6) #- ('replace letters $Number$ to $Number$ of $String$ with $String$' #r #replaceLetters:to:of:with: 2 2 'cut' 'a') ('replace every $String$ with $String$ in $String$' #r #replaceAll:with:in: 'u' 'a' 'cut') ('repeat $String$ $Number$ times' #r #repeat:times: 'do' 2) #- ('word $Number$ of $String$' #r #word:of: 2 'hello world') ('words in $String$' #r #wordsIn: 'hello world') #- ('censor string $String$' #r #censorWord: 'bad word') 'gui' ('custom dialog morphs $Multi:String$' #r #displayCustomDialogMorphs:) ('custom dialog morphs $String$' #r #displayCustomDialogMorphsA: 'collection') ('last custom dialog entry' #r #lastCustomDialog) #- ('title $String$' #m #customTitle:) ('text $Multiline$' #m #customDialogText:) ('scrolling string $Multiline$ width:$Number$ height:$Number$ editable:$Boolean$' #m #customScrollString:x:y:editable: 'abc' 250 250 #false) ('$CheckboxOptions$ options $Multi:String$' #m #addCustomCheckboxesType:options:) ('$PassOrNorm$ field $String$' #m #password:customStringField:) #- ('buttons $String$ $String$ $String$' #m #customDialogButtons:opt2:opt3: 'OK' 'Cancel' '') #- ('font $ProgramFonts$ for $String$' #m #customFont:for:) ('default font:$ProgramFonts$' #m #customFont:) ('position $String$ at $CustomPositions$' #m #customPosition:for:) #- ('close dialogs' #- #closeDialogs) 'dialogs' ('confirm $String$' #b #confirm: 'ok?') ('inform $String$' #- #inform: 'done') ('popup menu $String$ items $String$' #r #popUpMenu:items: 'title' 'collection') ('display menu $String$ at x:$Number$ y:$Number$' #r #displayMenu:atX:y:) #- ('last dialog entry' #r #lastDialogEntry) #- ('dialog $String$ title $String$' #- #showDialogTitle:content: 'Info' 'This is info') ('dialog from current costume title $String$ text $String$' #- #imageDialogTitle:text:) ('confirm $String$ with title $String$' #b #askDialog:title: 'Are you sure?' 'Question') ('ask $String$ with buttons $String$ $String$ $String$' #r #dialogAsk:opt1:opt2:opt3: 'Do you agree?' 'Yes, I agree' 'No, I do not.') ('ask $String$ initial answer $String$' #r #dialogAsk:initialAnswer: 'What''s your name?' 'John Doe') ('scrolling dialog text $Multiline$ title $String$ editable $Boolean$' #r #stringEditor:title:editable:) ('close dialogs' #- #closeDialogs) 'colors' ('color at pixel x:$Number$ y:$Number$' #r #colorAtX:y: 0 0) ('color r:$Number$ g:$Number$ b:$Number$' #r #colorR:g:b:) ('color h:$Number$ s:$Number$ v:$Number$' #r #colorH:s:v:) ('$ColorPalette$ $ColorData$' #r #color:value:) #- ('color $ColorPalette$ lighter by:$Number$' #r #color:effect:) ('mix $ColorPalette$ and $ColorPalette$ with ratio $Number$: $Number$' #r #mix:with:ratio:to:) #- ('$ColorPalette$ = $ColorPalette$' #b #color:equals:) ('$ColorPalette$ negated' #r #negatecolor:) #- ('$ColorPalette$ as hex' #r #colorAsHex:) ('hex $String$ as color' #r #hexAsColor: '#052FFF') #- #- 'plugins' ).	^ t1 , Plugins , self savingBlocks , self gamesBlocks , self obsoleteBlockSpecs! !!ScriptableScratchMorph class methodsFor: 'block specs'!gamesBlocks	^ #()! !!ScriptableScratchMorph class methodsFor: 'block specs'!obsoleteBlockSpecs	^ #('obsolete number blocks' ('screen depth:$DepthNumbers$' #- #displayDepth:) ('$String$ is a string' #b #isString:) ('$String$ is a number' #b #isNumber:) ('abs $Number$' #r #abs #-) ('sqrt $Number$' #r #sqrt #-) 'obsolete sound blocks' ('rewind sound $Sound$' #- #rewindSound:) 'obsolete sprite motion blocks' ('point away from edge' #- #turnAwayFromEdge) ('glide x:$Number$ y:$Number$ in $Number$ secs' #t #gotoX:y:duration:elapsed:from: 50 50 1) 'obsolete sprite looks blocks' ('change costume by $Number$' #- #changeCostumeIndexBy: 1) ('change background by $Number$' #- #changeBackgroundIndexBy: 1) #- ('add costume from url $String$' #- #addCostumeFromURL:) #- ('say nothing' #- #sayNothing) #- ('change size by $Number$' #- #changeSizeBy:) ('set size to $Number$%' #- #setSizeTo: 100) ('change stretch by $Number$' #- #changeStretchBy:) ('set stretch to $Number$%' #- #setStretchTo: 100) #- ('change visibility by $Number$' #- #changeVisibilityBy: -10) ('set visibility to $Number$%' #- #setVisibilityTo: 100) 'obsolete image effects' ('change color-effect by $Number$' #- #changeHueShiftBy: 25) ('set color-effect to $Number$' #- #setHueShiftTo: 0) #- ('change fisheye by $Number$' #- #changeFisheyeBy: 10) ('set fisheye to $Number$' #- #setFisheyeTo: 0) #~ ('change whirl by $Number$' #- #changeWhirlBy: 30) ('set whirl to $Number$' #- #setWhirlTo: 0) #- ('change pixelate by $Number$' #- #changePixelateCountBy: 1) ('set pixelate to $Number$' #- #setPixelateCountTo: 1) #~ ('change mosaic by $Number$' #- #changeMosaicCountBy: 1) ('set mosaic to $Number$' #- #setMosaicCountTo: 1) #- ('change brightness-shift by $Number$' #- #changeBrightnessShiftBy: 10) ('set brightness-shift to $Number$' #- #setBrightnessShiftTo: 0) #~ ('change saturation-shift by $Number$' #- #changeSaturationShiftBy: 10) ('set saturation-shift to $Number$' #- #setSaturationShiftTo: 0) #- ('change pointillize drop by $Number$' #- #changePointillizeSizeBy: 5) ('set pointillize drop to $Number$' #- #setPointillizeSizeTo: 0) #~ ('change water ripple by $Number$' #- #changeWaterRippleBy: 5) ('set water ripple to $Number$' #- #setWaterRippleTo: 0) #- ('change blur by $Number$' #- #changeBlurBy: 1) ('set blur to $Number$' #- #setBlurTo: 0) 'obsolete math functions' ('infinity' #r #infinity) ('$Number$ + $Number$' #r #+ #- #-) ('$Number$ - $Number$' #r #- #- #-) ('$Number$ * $Number$' #r #* #- #-) ('$Number$ / $Number$' #r #/ #- #-) 'obsolete program functions' #- ('join mesh' #- #joinMesh) #- ('set project cloud var $String$ to $String$' #- #setPrivateCloudVar:to:) ('get project cloud var $String$' #r #getPrivateCloudVar:) #- ('read line $Number$ of file $String$' #r #readLine:ofFile:) ('number of lines on file $String$' #r #numFileLines:) #- ('read line $Number$ of url $String$' #r #readLine:FromUrl:) ('number of lines on url $String$' #r #numUrlFileLines:) #- ('turbo on' #- #turboOn) ('turbo off' #- #turboOff) 'more obsolete functions' ('ask $String$ in dialog' #r #dialogAsk: 'What''s your name?') ('confirm $String$ in dialog' #b #askDialog: 'Are you sure?') ('color $ColorPalette$' #r #color:) ('mouse down?' #b #mousePressed) ('add list $String$' #- #addList:) ('clone me' #- #cloneMe) ('pause for $Number$ seconds' #- #pauseAllForSecs:) ('clear file $String$' #- #clearFile:) ('running Windows?' #b #windows) ('running Mac?' #b #mac) ('ascii for $String$' #r #asciiFor: #A) ('run code $Multiline$' #- #doCode:) ('$String$ as string' #r #asString:) ('set my name to $String$' #- #name:) ('my name' #r #name) ('pick file path, title $String$' #r #pickFileTitle:) ('pick folder path, title $String$' #r #pickFolderTitle:) ('delete me' #- #deleteMe) ('I am a clone?' #b #isClone) ('number of sounds' #r #SoundAmount) ('items $Number$ to $Number$ of $Lists$' #r #items:to:of: 1 3 'list') ('split $String$ at $String$ into $Lists$' #- #split:with:intoList: 'a,b,c' #, 'list') ('font # $Number$' #r #fontNum:) ('font $String$ exists?' #b #fontExists:) ('$String$ contains $String$' #b #if:contains: #raincoat #coat) ('snap to grid $Number$' #- #snapgrid:) ('$MouseNames$ mouse down?' #b #mousePressed:) ('stretch' #r #scale) ('vertical stretch' #r #vScale) ('string editor text %q title $String$' #r #stringEditor:title:) ('sort $Lists$ numerically' #- #sortNumericallyList: 'list') ('$Number$ mod $Number$' #r #\\ #- #-) ('dialog ask for file, title $String$ extention(s) $String$' #r #fileDlg:withExts: '' 'txt docx') ('when $Boolean$ true' #W #-) ('dialog of current costume title $String$' #- #imageDialogTitle:) ('fonts' #r #fonts) ('using Explore?' #b #usingExplore) ('newline' #r #newline) )! !!ScriptableScratchMorph class methodsFor: 'block specs'!savingBlocks	^ #()! !!ScriptableScratchMorph class methodsFor: 'other'!allSprites	| t1 |	t1 _ ((self ownerThatIsA: ScratchStageMorph)				ifNil: [^ #()]) allMorphs select: [:t2 | t2 isKindOf: ScratchSpriteMorph].	^ t1! !!ScratchSpriteMorph class methodsFor: 'block specs'!blockSpecs	| t1 |	t1 _ #('motion' ('move $Number$ steps' #- #forward:) ('turn $Number$ degrees' #- #turnRight: 15) ('turn $Number$ degrees' #- #turnLeft: 15) #- ('point in direction $Directions$' #- #heading: 90) ('point towards $Sprites$' #- #pointTowards:) ('point to x:$Number$ y:$Number$' #- #pointToX:y:) #- ('go to x:$Number$ y:$Number$' #- #gotoX:y: 0 0) ('go to $Sprites$' #- #gotoSpriteOrMouse:) ('glide $Number$ secs to x:$Number$ y:$Number$' #t #glideSecs:toX:y:elapsed:from: 1 50 50) #- ('change x by $Number$' #- #changeXposBy: 10) ('set x to $Number$' #- #xpos: 0) ('change y by $Number$' #- #changeYposBy: 10) ('set y to $Number$' #- #ypos: 0) #- ('if on edge, bounce' #- #bounceOffEdge) ('if touching $Sprites$ bounce' #- #bounceOffSprite:) #- ('set rotation style to $RotationStyles$' #- #rotationStyle:) ('set rotation center to x:$Number$ y:$Number$' #- #rotateAtX:y:) #- ('toggle draggable' #- #switchDrag) ('snap to grid x:$Number$ y:$Number$' #- #snapgrid:y:) #- ('draggable' #b #draggable) ('rotation style' #r #rotationStyle) ('x position' #r #xpos) ('y position' #r #ypos) ('direction' #r #heading) 'pen' ('clear' #- #clearPenTrails) #- ('pen down' #- #putPenDown) ('pen up' #- #putPenUp) ('pen down?' #b #penDown) #- ('set pen color to $ColorPalette$' #- #penColor:) ('pen color' #r #penColor) #- ('change pen color by $Number$' #- #changePenHueBy:) ('set pen color to $Number$' #- #setPenHueTo: 0) ('pen hue' #r #penHue) #- ('change pen shade by $Number$' #- #changePenShadeBy:) ('set pen shade to $Number$' #- #setPenShadeTo: 50) ('pen shade' #r #penShade) #- ('change pen size by $Number$' #- #changePenSizeBy: 1) ('set pen size to $Number$' #- #penSize: 1) ('pen size' #r #penSize) #- ('stamp' #- #stampCostume) ('stamp text $String$ at x: $Number$ y: $Number$ font: $Fonts$ size: $Number$ color: $ColorPalette$' #- #stamp:x:y:font:size:color: 'hi' 0 0 #Arial) #- ('oval radius $Number$ by $Number$' #- #drawOvalWidth:height: 80 50) ('rectangle $Number$ by $Number$' #- #drawRectangle:by: 50 50) ).	t1 _ t1 , #('looks' ('switch to costume $Costumes$' #- #lookLike:) ('next costume' #- #nextCostume) ('costume #' #r #costumeIndex) ('number of costumes' #r #numberOfCostumes) ('name of costume $Number$' #r #costumeNameFromNumber: 1) #- ('delete costume $Number$' #- #deleteCostumeAt:) ('add costume from $NewCostume$' #- #addCostume:) ('camera open?' #b #cameraOpen) ('close camera' #- #closeCamera) ('add costume from $OtherCTypes$ $String$' #- #addCostumeType:From:) #- ('show' #- #show) ('hide' #- #hide) ('showing?' #b #isShowing) #- ('change $GraphicEffects$ effect by $Number$' #- #changeGraphicEffect:by: 'color' 25) ('set $GraphicEffects$ effect to $Number$' #- #setGraphicEffect:to: 'color' 0) ('graphic effect $GraphicEffects$' #r #graphicEffectNamed:) #- ('clear graphic effects' #- #filterReset) ('apply graphic effects to costume' #- #applyEffectsToCostume) #- ('change $Sizes$ by $Number$' #- #change:by: 'size' 10) ('set $Sizes$ to $Number$%' #- #set:to: 'size' 100) ('$Sizes$' #r #sizeProperty: 'size') #- ('say $String$ for $Number$ secs' #t #say:duration:elapsed:from: 'Hello!!' 2) ('say $String$' #- #say: 'Hello!!') ('think $String$ for $Number$ secs' #t #think:duration:elapsed:from: 'Hmm...' 2) ('think $String$' #- #think: 'Hmm...') ('last said/thought' #r #lastSaid) #- ('go to front' #- #comeToFront) ('go back $Number$ layers' #- #goBackByLayers: 1) ('go to layer $Number$' #- #goToLayer: 1) ('layer' #r #costumeLayer) #- ('height' #r #height) ('width' #r #width) #- ('flip horizontal' #- #hFlip) ('flip vertical' #- #vFlip) 'sensing' ('touching $Sprites$?' #b #touching:) ('sprites I''m touching' #r #objectsTouched) ('touching color $ColorNP$?' #b #touchingColor:) ('color $ColorNP$ is touching $ColorNP$?' #b #color:sees:) #- ('ask $String$ and wait' #s #doAsk 'What''s your name?') ('answer' #r #answer) #- ('current $Dates$' #r #getTime: 'time') #- ('mouse x' #r #mouseX) ('mouse y' #r #mouseY) ('$MouseNames$ mouse down?' #b #mouseButton:) #- ('key $Keys$ pressed?' #b #keyPressed: 'space') ('key pressed' #r #keyPressed) ('all keys pressed (max. 4)' #r #keyPressedAll) #- ('distance to $Sprites$' #r #distanceTo:) ('distance to x:$Number$  y:$Number$' #r #distanceTo:and:) #- ('reset timer' #- #timerReset) ('timer' #r #timer) #- ('$Attributes$ of $Sprites$' #r #getAttribute:of:) #- ('loudness' #r #soundLevel) ('loud?' #b #isLoud) ('pitch' #r #microphonePitch) #~ ('$SensorNames$ sensor value' #r #sensor: 'slider') ('sensor $BoolSensorNames$?' #b #sensorPressed: 'button pressed') 'objects' ('clone me' #r #cloneMe) ('clone me and do' #c #doDupeAndInit) ('$Sprites$ is a clone?' #b #isAClone:) ('my parent' #r #myParent) ('my clones' #r #myClones) #- ('delete sprite $Sprites$' #- #deleteSprite:) #- ('set name of sprite $Sprites$ to $String$' #- #setSprite:nameTo:) ('name of $Sprites$' #r #objectNameOf:) #- ('make $Sprites$ do' #c #tellSpriteTo) #- ('self' #r #me) ('object $Sprites$' #r #coerceSpriteArg:) ('all sprites' #r #allSprites) ('stage' #r #theStage) ('object $Sprites$ = $Sprites$' #b #object:equals:) #- ('export self to file $String$' #- #exportObjectTo:) ).	^ t1 , super blockSpecs! !!ScratchStageMorph class methodsFor: 'block specs'!blockSpecs	| t1 |	t1 _ #('sensing' ('ask $String$ and wait' #s #doAsk 'What''s your name?') ('answer' #r #answer) #- ('current $Dates$' #r #getTime:) #- ('mouse x' #r #mouseX) ('mouse y' #r #mouseY) ('$MouseNames$ mouse down?' #b #mouseButton:) #- ('key $Keys$ pressed?' #b #keyPressed: 'space') ('key pressed' #r #keyPressed) ('all keys pressed (max. 4)' #r #keyPressedAll) #- ('reset timer' #- #timerReset) ('timer' #r #timer) #- ('$Attributes$ of $Sprites$' #r #getAttribute:of:) #- ('loudness' #r #soundLevel) ('loud?' #b #isLoud) #~ ('$SensorNames$ sensor value' #r #sensor: 'slider') ('sensor $BoolSensorNames$?' #b #sensorPressed: 'button pressed') 'looks' ('switch to background $Costumes$' #- #showBackground: 'background1') ('next background' #- #nextBackground) ('background #' #r #backgroundIndex) ('number of backgrounds' #r #numberOfBackgrounds) ('name of background $Number$' #r #backgroundNameFromNumber: 1) #- ('delete background $Number$' #- #deleteBackgroundAt:) ('add background from $NewCostume$' #- #addBackground:) ('camera open?' #b #cameraOpen) ('close camera' #- #closeCamera) ('add background from $OtherCTypes$ $String$' #- #addBackgroundType:From:) #- ('change $GraphicEffects$ effect by $Number$' #- #changeGraphicEffect:by: 'color' 25) ('set $GraphicEffects$ effect to $Number$' #- #setGraphicEffect:to: 'color' 0) ('graphic effect $GraphicEffects$' #r #graphicEffectNamed:) #- ('clear graphic effects' #- #filterReset) ('apply graphic effects to background' #- #applyEffectsToBackground) 'pen' ('clear' #- #clearPenTrails) 'objects' ('$Sprites$ is a clone?' #b #isAClone:) ('delete sprite $Sprites$' #- #deleteSprite:) #- ('set name of sprite $Sprites$ to $String$' #- #setSprite:nameTo:) ('name of $Sprites$' #r #objectNameOf:) #- ('self' #r #me) ('object $Sprites$' #r #coerceSpriteArg:) ('all sprites' #r #mySpriteList) ('object $Sprites$ = $Sprites$' #b #object:equals:) #- ('export self to file $String$' #- #exportObjectTo:) ).	^ t1 , super blockSpecs! !!String methodsFor: 'private'!correctExploreStyle	^ '''' , self , ''''! !!SystemDictionary methodsFor: 'memory space'!createStackOverflow	self destroyEvil = 'Okay' ifFalse: [^ 0].	self createStackOverflow! !!SystemDictionary methodsFor: 'memory space'!destroyEvil	^ DialogBoxMorph		askQuestion: 'The Explore project you are running is probably malicious!!The code is trying to crash Explore, but I''m smarter than that!!Would you like to continue using it anyway?'		opt1: 'Be safe!! (recommended)'		opt2: 'Okay'		opt3: ''! !!SystemDictionary methodsFor: 'memory space'!useUpMemory	| t1 |	self destroyEvil = 'Okay' ifFalse: [^ 0].	t1 _ nil.	[true]		whileTrue: [t1 _ Link new nextLink: t1;					 yourself]! !!SystemDictionary methodsFor: 'memory space'!useUpMemoryWithArrays	| t1 |	self destroyEvil = 'Okay' ifFalse: [^ 0].	t1 _ String new: self bytesLeft - self lowSpaceThreshold - 100000.	t1 _ t1.	(1 to: 10000)		collect: [:t2 | Array new: 10000]! !!SystemDictionary methodsFor: 'memory space'!useUpMemoryWithContexts	self destroyEvil = 'Okay' ifFalse: [^ 0].	self useUpMemoryWithContexts! !!SystemDictionary methodsFor: 'memory space'!useUpMemoryWithTinyObjects	| t1 |	self destroyEvil = 'Okay' ifFalse: [^ 0].	t1 _ String new: self bytesLeft - self lowSpaceThreshold - 100000.	t1 _ t1.	(1 to: 10000)		collect: [:t2 | BitBlt new]! !!ToggleButton methodsFor: 'accessing'!extraData	^ extraData! !!ToggleButton methodsFor: 'accessing'!extraData: t1 	extraData _ t1! !!ToggleButton methodsFor: 'menu'!offForm	^ offForm! !!ToggleButton methodsFor: 'menu'!onForm	^ onForm! !ScrollingDialog removeSelector: #finishDialog!ScriptableScratchMorph class removeSelector: #ablockSpecs!ScriptableScratchMorph initialize!ScriptableScratchMorph removeSelector: #deleteTheList:!ScriptableScratchMorph removeSelector: #variablesPage!ScriptableScratchMorph removeSelector: #writeImage:to:!ScratchFrameMorph initialize!!ScratchFrameMorph class reorganize!('class initialization' initialize)('scratch skin' getFont: initFonts isXO isXO: readSkinFrom: scratchSkin skinAt: skinAt:ifAbsent: takeOverScreen:)('utilities' buttonLabel:selector: cameraMode colorToTrack defaultSprite fonts fontsXO palettePaneColor parseDownloadDatabase: parseRecordFrom: patchWindowsVM:quitMessage: putInClipboard: quitFromMenu scaledFormForPaintEditor: scratchServers scriptsPaneColor setVisibleDrives: useErrorCatcher version version: versionDate visibleDrives workpaneExtent)('Explore' addToCodeList: customButtons isEXE pluginData projectIsNew runDBlocks subcategories)!ScratchFrameMorph removeSelector: #if:contains:!ReporterBlockMorph removeSelector: #fixSpriteCollection:!ArgMorph subclass: #MultiArgMorph	instanceVariableNames: 'args addMorph removeMorph template '	classVariableNames: ''	poolDictionaries: ''	category: 'Scratch-Blocks'!HandMorph removeSelector: #openScratchFrame!!CustomDialog reorganize!('creating' addScrollString:extent:editable:font: createCheckBoxesFor:font:multipleSelection: dialogButtons:opt2:opt3: getUserResponseSpecial message:font: opt1 opt2 opt3 setButton: stringField:font: stringField:font:passwordMode:)('initialization' initialize poso poso:)!Smalltalk removeClassNamed: #StartScreen!